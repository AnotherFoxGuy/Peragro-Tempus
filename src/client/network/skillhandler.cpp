/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "client/network/skillhandler.h"

#include "common/eventcs/eventmanager.h"
#include "common/eventcs/entityevent.h"

#include "client/pointer/pointer.h"

void SkillHandler::handleSkillList(GenericMessage* msg)
{
  SkillListMessage pmsg;
  pmsg.deserialise(msg->getByteStream());

  using namespace PT::Events;
  EventManager* evmgr = PointerLibrary::getInstance()->getEventManager();
  {
    csRef<iEvent> pEvent = evmgr->CreateEvent(EntityHelper::MakeEntitySpecific("entity.skill.list", pmsg.getEntityId()), true);
    pEvent->Add("entityId", pmsg.getEntityId());
    csRef<iEvent> statsList = evmgr->CreateEvent("statsList", true);
    for (unsigned char i = 0; i < pmsg.getStatsCount(); i++)
    {
      std::stringstream itemName;
      itemName << "stats" << "_" << i;
      csRef<iEvent> item = evmgr->CreateEvent(itemName.str().c_str(), true);
      item->Add("skillId", pmsg.getSkillId(i));
      item->Add("name", *pmsg.getName(i)?*pmsg.getName(i):"");
      item->Add("xp", pmsg.getXp(i));
      statsList->Add(itemName.str().c_str(), item);
    }
    pEvent->Add("statsList", statsList);

    evmgr->AddEvent(pEvent);
  }

} // end handleSkillList

void SkillHandler::handleSkillUpdate(GenericMessage* msg)
{
  SkillUpdateMessage pmsg;
  pmsg.deserialise(msg->getByteStream());

  using namespace PT::Events;
  EventManager* evmgr = PointerLibrary::getInstance()->getEventManager();
  {
    csRef<iEvent> pEvent = evmgr->CreateEvent(EntityHelper::MakeEntitySpecific("entity.skill.update", pmsg.getEntityId()), true);
    pEvent->Add("entityId", pmsg.getEntityId());
    pEvent->Add("skillId", pmsg.getSkillId());
    pEvent->Add("xp", pmsg.getXp());

    evmgr->AddEvent(pEvent);
  }

} // end handleSkillUpdate

