/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "common/network/entitymessages.h"
#include "deserialiser.h"
#include "serialiser.h"

bool AddNpcEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(entityname);
  serial.setString(meshname);
  serial.setString(filename);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  serial.setInt32(entityid);
  serial.setInt24(equipmentcount);
  for ( size_t i = 0; i < equipmentcount ; i++ )
  {
    serial.setInt32(equipment[i].slotid);
    serial.setInt32(equipment[i].itemid);
    serial.setString(equipment[i].meshname);
    serial.setString(equipment[i].filename);
  };

  serial.setInt8(poseid);
  return serial.isValid();
}

void AddNpcEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityname = static_cast<ptString>(serial.getString());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
  entityid = static_cast<unsigned int>(serial.getInt32());
  equipmentcount = static_cast<unsigned int>(serial.getInt24());
  setEquipmentCount(equipmentcount);
  for (size_t i = 0; i < equipmentcount ; ++i)
  {
    equipment[i].slotid = static_cast<unsigned int>(serial.getInt32());
    equipment[i].itemid = static_cast<unsigned int>(serial.getInt32());
    equipment[i].meshname = static_cast<ptString>(serial.getString());
    equipment[i].filename = static_cast<ptString>(serial.getString());
  };

  poseid = static_cast<unsigned char>(serial.getInt8());
}

bool AddItemEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(entityname);
  serial.setString(meshname);
  serial.setString(filename);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  serial.setInt32(entityid);
  return serial.isValid();
}

void AddItemEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityname = static_cast<ptString>(serial.getString());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
  entityid = static_cast<unsigned int>(serial.getInt32());
}

bool AddDoorEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(isopen);
  serial.setInt8(islocked);
  serial.setInt32(entityid);
  serial.setString(entityname);
  serial.setInt16(meshid);
  serial.setString(meshname);
  serial.setString(filename);
  serial.setString(animationname);
  return serial.isValid();
}

void AddDoorEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  isopen = static_cast<bool>(serial.getInt8());
  islocked = static_cast<bool>(serial.getInt8());
  entityid = static_cast<unsigned int>(serial.getInt32());
  entityname = static_cast<ptString>(serial.getString());
  meshid = static_cast<unsigned short>(serial.getInt16());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  animationname = static_cast<ptString>(serial.getString());
}

bool AddPlayerEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(entityname);
  serial.setString(meshname);
  serial.setString(filename);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  serial.setInt8(haircolour.red);
  serial.setInt8(haircolour.green);
  serial.setInt8(haircolour.blue);
  serial.setInt8(skincolour.red);
  serial.setInt8(skincolour.green);
  serial.setInt8(skincolour.blue);
  serial.setInt8(decalcolour.red);
  serial.setInt8(decalcolour.green);
  serial.setInt8(decalcolour.blue);
  serial.setInt32(entityid);
  serial.setInt24(equipmentcount);
  for ( size_t i = 0; i < equipmentcount ; i++ )
  {
    serial.setInt32(equipment[i].slotid);
    serial.setInt32(equipment[i].itemid);
    serial.setString(equipment[i].meshname);
    serial.setString(equipment[i].filename);
  };

  serial.setInt8(poseid);
  return serial.isValid();
}

void AddPlayerEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityname = static_cast<ptString>(serial.getString());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
  haircolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  entityid = static_cast<unsigned int>(serial.getInt32());
  equipmentcount = static_cast<unsigned int>(serial.getInt24());
  setEquipmentCount(equipmentcount);
  for (size_t i = 0; i < equipmentcount ; ++i)
  {
    equipment[i].slotid = static_cast<unsigned int>(serial.getInt32());
    equipment[i].itemid = static_cast<unsigned int>(serial.getInt32());
    equipment[i].meshname = static_cast<ptString>(serial.getString());
    equipment[i].filename = static_cast<ptString>(serial.getString());
  };

  poseid = static_cast<unsigned char>(serial.getInt8());
}

bool AddMountEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(entityname);
  serial.setString(meshname);
  serial.setString(filename);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  serial.setInt32(entityid);
  serial.setInt32(inventoryid);
  return serial.isValid();
}

void AddMountEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityname = static_cast<ptString>(serial.getString());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
  entityid = static_cast<unsigned int>(serial.getInt32());
  inventoryid = static_cast<unsigned int>(serial.getInt32());
}

bool RemoveEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  return serial.isValid();
}

void RemoveEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
}

bool MoveMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(movedirection.x());
  serial.setFloat(movedirection.y());
  serial.setFloat(movedirection.z());
  serial.setInt32(entityid);
  serial.setInt8(run);
  serial.setInt8(jump);
  return serial.isValid();
}

void MoveMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  movedirection.x() = serial.getFloat();
  movedirection.y() = serial.getFloat();
  movedirection.z() = serial.getFloat();
  entityid = static_cast<unsigned int>(serial.getInt32());
  run = static_cast<bool>(serial.getInt8());
  jump = static_cast<bool>(serial.getInt8());
}

bool MoveRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(movedirection.x());
  serial.setFloat(movedirection.y());
  serial.setFloat(movedirection.z());
  serial.setInt8(run);
  serial.setInt8(jump);
  return serial.isValid();
}

void MoveRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  movedirection.x() = serial.getFloat();
  movedirection.y() = serial.getFloat();
  movedirection.z() = serial.getFloat();
  run = static_cast<bool>(serial.getInt8());
  jump = static_cast<bool>(serial.getInt8());
}

bool MoveToMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(from.x());
  serial.setFloat(from.y());
  serial.setFloat(from.z());
  serial.setFloat(to.x());
  serial.setFloat(to.y());
  serial.setFloat(to.z());
  serial.setFloat(speed);
  serial.setInt32(entityid);
  serial.setInt8(run);
  serial.setInt8(turn);
  serial.setInt8(jump);
  return serial.isValid();
}

void MoveToMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  from.x() = serial.getFloat();
  from.y() = serial.getFloat();
  from.z() = serial.getFloat();
  to.x() = serial.getFloat();
  to.y() = serial.getFloat();
  to.z() = serial.getFloat();
  speed = static_cast<float>(serial.getFloat());
  entityid = static_cast<unsigned int>(serial.getInt32());
  run = static_cast<bool>(serial.getInt8());
  turn = static_cast<unsigned char>(serial.getInt8());
  jump = static_cast<bool>(serial.getInt8());
}

bool MoveToRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(to.x());
  serial.setFloat(to.y());
  serial.setFloat(to.z());
  serial.setInt8(run);
  serial.setInt8(backwards);
  serial.setInt8(turn);
  serial.setInt8(jump);
  return serial.isValid();
}

void MoveToRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  to.x() = serial.getFloat();
  to.y() = serial.getFloat();
  to.z() = serial.getFloat();
  run = static_cast<bool>(serial.getInt8());
  backwards = static_cast<bool>(serial.getInt8());
  turn = static_cast<unsigned char>(serial.getInt8());
  jump = static_cast<bool>(serial.getInt8());
}

bool PickRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itementityid);
  serial.setInt8(slot);
  return serial.isValid();
}

void PickRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itementityid = static_cast<unsigned int>(serial.getInt32());
  slot = static_cast<unsigned char>(serial.getInt8());
}

bool PickResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itementityid);
  serial.setInt8(slotid);
  serial.setString(name);
  serial.setString(iconname);
  serial.setString(description);
  serial.setFloat(weight);
  serial.setString(equiptype);
  serial.setString(error);
  return serial.isValid();
}

void PickResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itementityid = static_cast<unsigned int>(serial.getInt32());
  slotid = static_cast<unsigned char>(serial.getInt8());
  name = static_cast<ptString>(serial.getString());
  iconname = static_cast<ptString>(serial.getString());
  description = static_cast<ptString>(serial.getString());
  weight = static_cast<float>(serial.getFloat());
  equiptype = static_cast<ptString>(serial.getString());
  error = static_cast<ptString>(serial.getString());
}

bool DropRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(slot);
  serial.setInt32(inventoryid);
  return serial.isValid();
}

void DropRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  slot = static_cast<unsigned char>(serial.getInt8());
  inventoryid = static_cast<unsigned int>(serial.getInt32());
}

bool DropResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(slotid);
  serial.setString(error);
  return serial.isValid();
}

void DropResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  slotid = static_cast<unsigned char>(serial.getInt8());
  error = static_cast<ptString>(serial.getString());
}

bool EquipMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setInt8(slotid);
  serial.setString(meshname);
  serial.setString(filename);
  return serial.isValid();
}

void EquipMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  slotid = static_cast<unsigned char>(serial.getInt8());
  meshname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
}

bool RelocateMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  return serial.isValid();
}

void RelocateMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
}

bool TeleportRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  return serial.isValid();
}

void TeleportRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
}

bool TeleportResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  return serial.isValid();
}

void TeleportResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
}

bool DrUpdateRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  return serial.isValid();
}

void DrUpdateRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
}

bool DrUpdateMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  serial.setInt32(entityid);
  return serial.isValid();
}

void DrUpdateMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
  entityid = static_cast<unsigned int>(serial.getInt32());
}

bool MountRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(mountentityid);
  return serial.isValid();
}

void MountRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  mountentityid = static_cast<unsigned int>(serial.getInt32());
}

bool MountMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(playerentityid);
  serial.setInt32(mountentityid);
  serial.setInt8(cancontrol);
  return serial.isValid();
}

void MountMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  playerentityid = static_cast<unsigned int>(serial.getInt32());
  mountentityid = static_cast<unsigned int>(serial.getInt32());
  cancontrol = static_cast<bool>(serial.getInt8());
}

bool UnmountRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(mountentityid);
  return serial.isValid();
}

void UnmountRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  mountentityid = static_cast<unsigned int>(serial.getInt32());
}

bool UnmountMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(playerentityid);
  serial.setInt32(mountentityid);
  return serial.isValid();
}

void UnmountMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  playerentityid = static_cast<unsigned int>(serial.getInt32());
  mountentityid = static_cast<unsigned int>(serial.getInt32());
}

bool PoseRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(poseid);
  return serial.isValid();
}

void PoseRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  poseid = static_cast<unsigned char>(serial.getInt8());
}

bool PoseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setInt8(poseid);
  return serial.isValid();
}

void PoseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  poseid = static_cast<unsigned char>(serial.getInt8());
}

