/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "common/network/usermessages.h"
#include "deserialiser.h"
#include "serialiser.h"

bool LoginRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(username);
  serial.setString(password);
  return serial.isValid();
}

void LoginRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  username = static_cast<ptString>(serial.getString());
  serial.getString(password);
}

bool LoginResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(error);
  serial.setInt8(isadmin);
  return serial.isValid();
}

void LoginResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  error = static_cast<ptString>(serial.getString());
  isadmin = static_cast<bool>(serial.getInt8());
}

bool RegisterRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(username);
  serial.setString(password);
  return serial.isValid();
}

void RegisterRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  username = static_cast<ptString>(serial.getString());
  serial.getString(password);
}

bool RegisterResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(error);
  return serial.isValid();
}

void RegisterResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  error = static_cast<ptString>(serial.getString());
}

bool CharListMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt24(charactercount);
  for ( size_t i = 0; i < charactercount ; i++ )
  {
    serial.setInt32(character[i].charid);
    serial.setString(character[i].name);
    serial.setInt8(character[i].haircolour.red);
    serial.setInt8(character[i].haircolour.green);
    serial.setInt8(character[i].haircolour.blue);
    serial.setInt8(character[i].skincolour.red);
    serial.setInt8(character[i].skincolour.green);
    serial.setInt8(character[i].skincolour.blue);
    serial.setInt8(character[i].decalcolour.red);
    serial.setInt8(character[i].decalcolour.green);
    serial.setInt8(character[i].decalcolour.blue);
  };

  return serial.isValid();
}

void CharListMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  charactercount = static_cast<unsigned int>(serial.getInt24());
  setCharacterCount(charactercount);
  for (size_t i = 0; i < charactercount ; ++i)
  {
    character[i].charid = static_cast<unsigned int>(serial.getInt32());
    character[i].name = static_cast<ptString>(serial.getString());
    character[i].haircolour.red = static_cast<unsigned char>(serial.getInt8());
    character[i].haircolour.green = static_cast<unsigned char>(serial.getInt8());
    character[i].haircolour.blue = static_cast<unsigned char>(serial.getInt8());
    character[i].skincolour.red = static_cast<unsigned char>(serial.getInt8());
    character[i].skincolour.green = static_cast<unsigned char>(serial.getInt8());
    character[i].skincolour.blue = static_cast<unsigned char>(serial.getInt8());
    character[i].decalcolour.red = static_cast<unsigned char>(serial.getInt8());
    character[i].decalcolour.green = static_cast<unsigned char>(serial.getInt8());
    character[i].decalcolour.blue = static_cast<unsigned char>(serial.getInt8());
  };

}

bool CharCreateRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  serial.setInt32(avatartemplateid);
  serial.setInt8(haircolour.red);
  serial.setInt8(haircolour.green);
  serial.setInt8(haircolour.blue);
  serial.setInt8(skincolour.red);
  serial.setInt8(skincolour.green);
  serial.setInt8(skincolour.blue);
  serial.setInt8(decalcolour.red);
  serial.setInt8(decalcolour.green);
  serial.setInt8(decalcolour.blue);
  return serial.isValid();
}

void CharCreateRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = static_cast<ptString>(serial.getString());
  avatartemplateid = static_cast<unsigned int>(serial.getInt32());
  haircolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
}

bool CharCreateResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(charid);
  serial.setString(name);
  serial.setInt8(haircolour.red);
  serial.setInt8(haircolour.green);
  serial.setInt8(haircolour.blue);
  serial.setInt8(skincolour.red);
  serial.setInt8(skincolour.green);
  serial.setInt8(skincolour.blue);
  serial.setInt8(decalcolour.red);
  serial.setInt8(decalcolour.green);
  serial.setInt8(decalcolour.blue);
  serial.setString(error);
  return serial.isValid();
}

void CharCreateResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  charid = static_cast<unsigned int>(serial.getInt32());
  name = static_cast<ptString>(serial.getString());
  haircolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  haircolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  skincolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.red = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.green = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  decalcolour.blue = static_cast<PT::Colour24::ColourType>(serial.getInt8());
  error = static_cast<ptString>(serial.getString());
}

bool CharSelectRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(charid);
  return serial.isValid();
}

void CharSelectRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  charid = static_cast<unsigned int>(serial.getInt32());
}

bool CharSelectResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setString(error);
  return serial.isValid();
}

void CharSelectResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  error = static_cast<ptString>(serial.getString());
}

bool MeshListRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  return serial.isValid();
}

void MeshListRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
}

bool MeshListResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt24(meshescount);
  for ( size_t i = 0; i < meshescount ; i++ )
  {
    serial.setInt32(meshes[i].meshid);
    serial.setString(meshes[i].meshname);
    serial.setString(meshes[i].filename);
  };

  return serial.isValid();
}

void MeshListResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  meshescount = static_cast<unsigned int>(serial.getInt24());
  setMeshesCount(meshescount);
  for (size_t i = 0; i < meshescount ; ++i)
  {
    meshes[i].meshid = static_cast<unsigned int>(serial.getInt32());
    meshes[i].meshname = static_cast<ptString>(serial.getString());
    meshes[i].filename = static_cast<ptString>(serial.getString());
  };

}

bool AvatarListRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  return serial.isValid();
}

void AvatarListRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
}

bool AvatarListResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt24(avatarcount);
  for ( size_t i = 0; i < avatarcount ; i++ )
  {
    serial.setInt32(avatar[i].avatarid);
    serial.setString(avatar[i].avatarname);
  };

  return serial.isValid();
}

void AvatarListResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  avatarcount = static_cast<unsigned int>(serial.getInt24());
  setAvatarCount(avatarcount);
  for (size_t i = 0; i < avatarcount ; ++i)
  {
    avatar[i].avatarid = static_cast<unsigned int>(serial.getInt32());
    avatar[i].avatarname = static_cast<ptString>(serial.getString());
  };

}

bool AvatarInfoRequestMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(avatarid);
  return serial.isValid();
}

void AvatarInfoRequestMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  avatarid = static_cast<unsigned int>(serial.getInt32());
}

bool AvatarInfoResponseMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(avatarid);
  serial.setString(avatarname);
  serial.setInt32(meshid);
  serial.setInt32(speciesid);
  serial.setString(factoryname);
  serial.setString(filename);
  serial.setInt24(inventorycount);
  for ( size_t i = 0; i < inventorycount ; i++ )
  {
    serial.setInt32(inventory[i].inventoryitemtemplateid);
    serial.setInt32(inventory[i].inventorychance);
  };

  serial.setInt24(equipmentcount);
  for ( size_t i = 0; i < equipmentcount ; i++ )
  {
    serial.setInt32(equipment[i].equipmentitemtemplateid);
    serial.setInt32(equipment[i].equipmentchance);
  };

  serial.setInt24(reputationscount);
  for ( size_t i = 0; i < reputationscount ; i++ )
  {
    serial.setString(reputations[i].reputationsname);
    serial.setInt32(reputations[i].reputationsminlevel);
    serial.setInt32(reputations[i].reputationsmaxlevel);
    serial.setInt32(reputations[i].reputationslevel);
  };

  serial.setInt24(skillscount);
  for ( size_t i = 0; i < skillscount ; i++ )
  {
    serial.setString(skills[i].skillsname);
    serial.setInt32(skills[i].skillsmin);
    serial.setInt32(skills[i].skillsmax);
    serial.setInt32(skills[i].skillsxp);
  };

  serial.setInt24(hobbiescount);
  for ( size_t i = 0; i < hobbiescount ; i++ )
  {
    serial.setString(hobbies[i].hobbiesname);
    serial.setInt32(hobbies[i].hobbiesorder);
    serial.setInt32(hobbies[i].hobbiesxp);
  };

  serial.setInt24(abilitiescount);
  for ( size_t i = 0; i < abilitiescount ; i++ )
  {
    serial.setString(abilities[i].abilitiesname);
    serial.setInt32(abilities[i].abilitiesmin);
    serial.setInt32(abilities[i].abilitiesmax);
    serial.setInt32(abilities[i].abilitiesxp);
  };

  serial.setInt24(vulberabilitiescount);
  for ( size_t i = 0; i < vulberabilitiescount ; i++ )
  {
    serial.setString(vulberabilities[i].vulberabilitiesname);
    serial.setInt32(vulberabilities[i].vulberabilitiesmin);
    serial.setInt32(vulberabilities[i].vulberabilitiesmax);
    serial.setInt32(vulberabilities[i].vulberabilitiesvalue);
  };

  return serial.isValid();
}

void AvatarInfoResponseMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  avatarid = static_cast<unsigned int>(serial.getInt32());
  avatarname = static_cast<ptString>(serial.getString());
  meshid = static_cast<unsigned int>(serial.getInt32());
  speciesid = static_cast<unsigned int>(serial.getInt32());
  factoryname = static_cast<ptString>(serial.getString());
  filename = static_cast<ptString>(serial.getString());
  inventorycount = static_cast<unsigned int>(serial.getInt24());
  setInventoryCount(inventorycount);
  for (size_t i = 0; i < inventorycount ; ++i)
  {
    inventory[i].inventoryitemtemplateid = static_cast<unsigned int>(serial.getInt32());
    inventory[i].inventorychance = static_cast<unsigned int>(serial.getInt32());
  };

  equipmentcount = static_cast<unsigned int>(serial.getInt24());
  setEquipmentCount(equipmentcount);
  for (size_t i = 0; i < equipmentcount ; ++i)
  {
    equipment[i].equipmentitemtemplateid = static_cast<unsigned int>(serial.getInt32());
    equipment[i].equipmentchance = static_cast<unsigned int>(serial.getInt32());
  };

  reputationscount = static_cast<unsigned int>(serial.getInt24());
  setReputationsCount(reputationscount);
  for (size_t i = 0; i < reputationscount ; ++i)
  {
    reputations[i].reputationsname = static_cast<ptString>(serial.getString());
    reputations[i].reputationsminlevel = static_cast<unsigned int>(serial.getInt32());
    reputations[i].reputationsmaxlevel = static_cast<unsigned int>(serial.getInt32());
    reputations[i].reputationslevel = static_cast<unsigned int>(serial.getInt32());
  };

  skillscount = static_cast<unsigned int>(serial.getInt24());
  setSkillsCount(skillscount);
  for (size_t i = 0; i < skillscount ; ++i)
  {
    skills[i].skillsname = static_cast<ptString>(serial.getString());
    skills[i].skillsmin = static_cast<unsigned int>(serial.getInt32());
    skills[i].skillsmax = static_cast<unsigned int>(serial.getInt32());
    skills[i].skillsxp = static_cast<unsigned int>(serial.getInt32());
  };

  hobbiescount = static_cast<unsigned int>(serial.getInt24());
  setHobbiesCount(hobbiescount);
  for (size_t i = 0; i < hobbiescount ; ++i)
  {
    hobbies[i].hobbiesname = static_cast<ptString>(serial.getString());
    hobbies[i].hobbiesorder = static_cast<unsigned int>(serial.getInt32());
    hobbies[i].hobbiesxp = static_cast<unsigned int>(serial.getInt32());
  };

  abilitiescount = static_cast<unsigned int>(serial.getInt24());
  setAbilitiesCount(abilitiescount);
  for (size_t i = 0; i < abilitiescount ; ++i)
  {
    abilities[i].abilitiesname = static_cast<ptString>(serial.getString());
    abilities[i].abilitiesmin = static_cast<unsigned int>(serial.getInt32());
    abilities[i].abilitiesmax = static_cast<unsigned int>(serial.getInt32());
    abilities[i].abilitiesxp = static_cast<unsigned int>(serial.getInt32());
  };

  vulberabilitiescount = static_cast<unsigned int>(serial.getInt24());
  setVulberabilitiesCount(vulberabilitiescount);
  for (size_t i = 0; i < vulberabilitiescount ; ++i)
  {
    vulberabilities[i].vulberabilitiesname = static_cast<ptString>(serial.getString());
    vulberabilities[i].vulberabilitiesmin = static_cast<unsigned int>(serial.getInt32());
    vulberabilities[i].vulberabilitiesmax = static_cast<unsigned int>(serial.getInt32());
    vulberabilities[i].vulberabilitiesvalue = static_cast<unsigned int>(serial.getInt32());
  };

}

