/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#ifndef PLAYERMESSAGES_H
#define PLAYERMESSAGES_H

#include "netmessage.h"

namespace PLAYER
{
  enum MESSAGES
  {
    INVENTORYLIST=1,
    INVENTORYMOVEITEMREQUEST=2,
    INVENTORYMOVEITEM=3,
    STATSLIST=4,
    STATSCHANGE=5,
    SKILLSLIST=6,
    MASTERIESLIST=7
  };
}

class InventoryListMessage : public NetMessage
{
  unsigned int inventoryid;
  class ListInventory
  {
  public:
    unsigned int itemid;
    unsigned int variation;
    unsigned char slotid;
    ptString name;
    ptString icon;
    ptString description;
    float weight;
    ptString equiptype;
  };

  unsigned char inventorycount;
  ListInventory* inventory;


public:
  InventoryListMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::INVENTORYLIST)
  {
    inventory = 0;
  }

  ~InventoryListMessage()
  {
    delete [] inventory;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned int getInventoryId() const { return inventoryid; }
  void setInventoryId(unsigned int x) { inventoryid = x; }

  unsigned char getInventoryCount() const { return inventorycount; }
  void setInventoryCount(unsigned char ic)
  {
    inventorycount = ic;
    delete [] inventory;
    inventory = new ListInventory[ic];
  }

  // --- begin ListInventory Getter and Setter ---

  unsigned int getItemId(size_t i) { return inventory[i].itemid; }
  void setItemId(size_t i, unsigned int x) { inventory[i].itemid = x; }

  unsigned int getVariation(size_t i) { return inventory[i].variation; }
  void setVariation(size_t i, unsigned int x) { inventory[i].variation = x; }

  unsigned char getSlotId(size_t i) { return inventory[i].slotid; }
  void setSlotId(size_t i, unsigned char x) { inventory[i].slotid = x; }

  ptString getName(size_t i) { return inventory[i].name; }
  void setName(size_t i, ptString x) { inventory[i].name = x; }

  ptString getIcon(size_t i) { return inventory[i].icon; }
  void setIcon(size_t i, ptString x) { inventory[i].icon = x; }

  ptString getDescription(size_t i) { return inventory[i].description; }
  void setDescription(size_t i, ptString x) { inventory[i].description = x; }

  float getWeight(size_t i) { return inventory[i].weight; }
  void setWeight(size_t i, float x) { inventory[i].weight = x; }

  ptString getEquipType(size_t i) { return inventory[i].equiptype; }
  void setEquipType(size_t i, ptString x) { inventory[i].equiptype = x; }

  // --- end ListInventory Getter and Setter ---

};

class InventoryMoveItemRequestMessage : public NetMessage
{
  unsigned char oldslot;
  unsigned int oldinventoryid;
  unsigned char newslot;
  unsigned int newinventoryid;

public:
  InventoryMoveItemRequestMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::INVENTORYMOVEITEMREQUEST)
  {
  }

  ~InventoryMoveItemRequestMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned char getOldSlot() const { return oldslot; }
  void setOldSlot(unsigned char x) { oldslot = x; }

  unsigned int getOldInventoryId() const { return oldinventoryid; }
  void setOldInventoryId(unsigned int x) { oldinventoryid = x; }

  unsigned char getNewSlot() const { return newslot; }
  void setNewSlot(unsigned char x) { newslot = x; }

  unsigned int getNewInventoryId() const { return newinventoryid; }
  void setNewInventoryId(unsigned int x) { newinventoryid = x; }

};

class InventoryMoveItemMessage : public NetMessage
{
  unsigned char oldslot;
  unsigned int oldinventoryid;
  unsigned char newslot;
  unsigned int newinventoryid;
  ptString error;

public:
  InventoryMoveItemMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::INVENTORYMOVEITEM)
  {
  }

  ~InventoryMoveItemMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned char getOldSlot() const { return oldslot; }
  void setOldSlot(unsigned char x) { oldslot = x; }

  unsigned int getOldInventoryId() const { return oldinventoryid; }
  void setOldInventoryId(unsigned int x) { oldinventoryid = x; }

  unsigned char getNewSlot() const { return newslot; }
  void setNewSlot(unsigned char x) { newslot = x; }

  unsigned int getNewInventoryId() const { return newinventoryid; }
  void setNewInventoryId(unsigned int x) { newinventoryid = x; }

  ptString getError() const { return error; }
  void setError(ptString x) { error = x; }

};

class StatsListMessage : public NetMessage
{
  class ListStats
  {
  public:
    unsigned short statid;
    ptString name;
    unsigned short level;
  };

  unsigned char statscount;
  ListStats* stats;


public:
  StatsListMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::STATSLIST)
  {
    stats = 0;
  }

  ~StatsListMessage()
  {
    delete [] stats;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned char getStatsCount() const { return statscount; }
  void setStatsCount(unsigned char ic)
  {
    statscount = ic;
    delete [] stats;
    stats = new ListStats[ic];
  }

  // --- begin ListStats Getter and Setter ---

  unsigned short getStatId(size_t i) { return stats[i].statid; }
  void setStatId(size_t i, unsigned short x) { stats[i].statid = x; }

  ptString getName(size_t i) { return stats[i].name; }
  void setName(size_t i, ptString x) { stats[i].name = x; }

  unsigned short getLevel(size_t i) { return stats[i].level; }
  void setLevel(size_t i, unsigned short x) { stats[i].level = x; }

  // --- end ListStats Getter and Setter ---

};

class StatsChangeMessage : public NetMessage
{
  unsigned short statid;
  unsigned short entityid;
  ptString name;
  unsigned short level;

public:
  StatsChangeMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::STATSCHANGE)
  {
  }

  ~StatsChangeMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned short getStatId() const { return statid; }
  void setStatId(unsigned short x) { statid = x; }

  unsigned short getEntityId() const { return entityid; }
  void setEntityId(unsigned short x) { entityid = x; }

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  unsigned short getLevel() const { return level; }
  void setLevel(unsigned short x) { level = x; }

};

class SkillsListMessage : public NetMessage
{
  class ListSkills
  {
  public:
    unsigned short skillid;
    ptString name;
  };

  unsigned char skillscount;
  ListSkills* skills;


public:
  SkillsListMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::SKILLSLIST)
  {
    skills = 0;
  }

  ~SkillsListMessage()
  {
    delete [] skills;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned char getSkillsCount() const { return skillscount; }
  void setSkillsCount(unsigned char ic)
  {
    skillscount = ic;
    delete [] skills;
    skills = new ListSkills[ic];
  }

  // --- begin ListSkills Getter and Setter ---

  unsigned short getSkillId(size_t i) { return skills[i].skillid; }
  void setSkillId(size_t i, unsigned short x) { skills[i].skillid = x; }

  ptString getName(size_t i) { return skills[i].name; }
  void setName(size_t i, ptString x) { skills[i].name = x; }

  // --- end ListSkills Getter and Setter ---

};

class MasteriesListMessage : public NetMessage
{
  class ListMasteries
  {
  public:
    unsigned char level;
    unsigned short id;
    unsigned short type;
  };

  unsigned char masteriescount;
  ListMasteries* masteries;


public:
  MasteriesListMessage() : NetMessage(MESSAGES::PLAYER,PLAYER::MASTERIESLIST)
  {
    masteries = 0;
  }

  ~MasteriesListMessage()
  {
    delete [] masteries;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned char getMasteriesCount() const { return masteriescount; }
  void setMasteriesCount(unsigned char ic)
  {
    masteriescount = ic;
    delete [] masteries;
    masteries = new ListMasteries[ic];
  }

  // --- begin ListMasteries Getter and Setter ---

  unsigned char getLevel(size_t i) { return masteries[i].level; }
  void setLevel(size_t i, unsigned char x) { masteries[i].level = x; }

  unsigned short getID(size_t i) { return masteries[i].id; }
  void setID(size_t i, unsigned short x) { masteries[i].id = x; }

  unsigned short getType(size_t i) { return masteries[i].type; }
  void setType(size_t i, unsigned short x) { masteries[i].type = x; }

  // --- end ListMasteries Getter and Setter ---

};

#endif // PLAYERMESSAGES_H
