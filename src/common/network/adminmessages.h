/*
    Copyright (C) 2005 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#ifndef ADMINMESSAGES_H
#define ADMINMESSAGES_H

#include "netmessage.h"

namespace ADMIN
{
  enum MESSAGES
  {
    REMOVEALL=0,
    CREATESECTOR=1,
    CREATEITEM=2,
    CREATENPC=3,
    CREATESPAWNPOINT=4,
    SPAWNITEM=5,
    SPAWNMOUNT=6,
    SPAWNDOOR=7,
    REMOVESPAWNEDENTITY=8,
    TOGGLEFLASHSTEP=9,
    CREATEZONE=10
  };
}

class RemoveAllMessage : public NetMessage
{
  ptString datatype;

public:
  RemoveAllMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::REMOVEALL)
  {
  }

  ~RemoveAllMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  ptString getDataType() const { return datatype; }
  void setDataType(ptString x) { datatype = x; }

};

class CreateSectorMessage : public NetMessage
{
  unsigned short sectorid;
  ptString name;
  ptString region;

public:
  CreateSectorMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::CREATESECTOR)
  {
  }

  ~CreateSectorMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  ptString getRegion() const { return region; }
  void setRegion(ptString x) { region = x; }

};

class CreateItemMessage : public NetMessage
{
  unsigned int itemid;
  ptString name;
  ptString icon;
  ptString description;
  ptString file;
  ptString mesh;
  float weight;
  ptString equiptype;

public:
  CreateItemMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::CREATEITEM)
  {
  }

  ~CreateItemMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned int getItemId() const { return itemid; }
  void setItemId(unsigned int x) { itemid = x; }

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  ptString getIcon() const { return icon; }
  void setIcon(ptString x) { icon = x; }

  ptString getDescription() const { return description; }
  void setDescription(ptString x) { description = x; }

  ptString getFile() const { return file; }
  void setFile(ptString x) { file = x; }

  ptString getMesh() const { return mesh; }
  void setMesh(ptString x) { mesh = x; }

  float getWeight() const { return weight; }
  void setWeight(float x) { weight = x; }

  ptString getEquipType() const { return equiptype; }
  void setEquipType(ptString x) { equiptype = x; }

};

class CreateNpcMessage : public NetMessage
{
  ptString name;
  ptString mesh;
  float pos[3];
  float rotation;
  unsigned short sectorid;
  ptString race;
  unsigned char haircolour[3];
  unsigned char skincolour[3];
  unsigned char decalcolour[3];
  ptString ai;
  class ListAiSetting
  {
  public:
    ptString key;
    ptString value;
  };

  unsigned char aisettingcount;
  ListAiSetting* aisetting;

  class ListInventory
  {
  public:
    unsigned char slotid;
    unsigned int itemid;
    unsigned int variation;
  };

  unsigned char inventorycount;
  ListInventory* inventory;


public:
  CreateNpcMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::CREATENPC)
  {
    aisetting = 0;
    inventory = 0;
  }

  ~CreateNpcMessage()
  {
    delete [] aisetting;
    delete [] inventory;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  ptString getMesh() const { return mesh; }
  void setMesh(ptString x) { mesh = x; }

  float* getPos() { return pos; }
  void setPos(float x, float y, float z)
  {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
  }
  void setPos(const float* x)
  {
    setPos(x[0], x[1], x[2]);
  }

  float getRotation() const { return rotation; }
  void setRotation(float x) { rotation = x; }

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

  ptString getRace() const { return race; }
  void setRace(ptString x) { race = x; }

  unsigned char* getHairColour() { return haircolour; }
  void setHairColour(unsigned char r, unsigned char g, unsigned char b)
  {
    haircolour[0] = r;
    haircolour[1] = g;
    haircolour[2] = b;
  }
  void setHairColour(const unsigned char* x)
  {
    setHairColour(x[0], x[1], x[2]);
  }

  unsigned char* getSkinColour() { return skincolour; }
  void setSkinColour(unsigned char r, unsigned char g, unsigned char b)
  {
    skincolour[0] = r;
    skincolour[1] = g;
    skincolour[2] = b;
  }
  void setSkinColour(const unsigned char* x)
  {
    setSkinColour(x[0], x[1], x[2]);
  }

  unsigned char* getDecalColour() { return decalcolour; }
  void setDecalColour(unsigned char r, unsigned char g, unsigned char b)
  {
    decalcolour[0] = r;
    decalcolour[1] = g;
    decalcolour[2] = b;
  }
  void setDecalColour(const unsigned char* x)
  {
    setDecalColour(x[0], x[1], x[2]);
  }

  ptString getAi() const { return ai; }
  void setAi(ptString x) { ai = x; }

  unsigned char getAiSettingCount() const { return aisettingcount; }
  void setAiSettingCount(unsigned char ic)
  {
    aisettingcount = ic;
    delete [] aisetting;
    aisetting = new ListAiSetting[ic];
  }

  // --- begin ListAiSetting Getter and Setter ---

  ptString getKey(size_t i) { return aisetting[i].key; }
  void setKey(size_t i, ptString x) { aisetting[i].key = x; }

  ptString getValue(size_t i) { return aisetting[i].value; }
  void setValue(size_t i, ptString x) { aisetting[i].value = x; }

  // --- end ListAiSetting Getter and Setter ---

  unsigned char getInventoryCount() const { return inventorycount; }
  void setInventoryCount(unsigned char ic)
  {
    inventorycount = ic;
    delete [] inventory;
    inventory = new ListInventory[ic];
  }

  // --- begin ListInventory Getter and Setter ---

  unsigned char getSlotId(size_t i) { return inventory[i].slotid; }
  void setSlotId(size_t i, unsigned char x) { inventory[i].slotid = x; }

  unsigned int getItemId(size_t i) { return inventory[i].itemid; }
  void setItemId(size_t i, unsigned int x) { inventory[i].itemid = x; }

  unsigned int getVariation(size_t i) { return inventory[i].variation; }
  void setVariation(size_t i, unsigned int x) { inventory[i].variation = x; }

  // --- end ListInventory Getter and Setter ---

};

class CreateSpawnPointMessage : public NetMessage
{
  unsigned int itemid;
  unsigned int variation;
  float pos[3];
  unsigned short sectorid;
  unsigned int interval;

public:
  CreateSpawnPointMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::CREATESPAWNPOINT)
  {
  }

  ~CreateSpawnPointMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned int getItemId() const { return itemid; }
  void setItemId(unsigned int x) { itemid = x; }

  unsigned int getVariation() const { return variation; }
  void setVariation(unsigned int x) { variation = x; }

  float* getPos() { return pos; }
  void setPos(float x, float y, float z)
  {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
  }
  void setPos(const float* x)
  {
    setPos(x[0], x[1], x[2]);
  }

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

  unsigned int getInterval() const { return interval; }
  void setInterval(unsigned int x) { interval = x; }

};

class SpawnItemMessage : public NetMessage
{
  unsigned int itemid;
  unsigned int variation;
  float pos[3];
  unsigned short sectorid;

public:
  SpawnItemMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::SPAWNITEM)
  {
  }

  ~SpawnItemMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned int getItemId() const { return itemid; }
  void setItemId(unsigned int x) { itemid = x; }

  unsigned int getVariation() const { return variation; }
  void setVariation(unsigned int x) { variation = x; }

  float* getPos() { return pos; }
  void setPos(float x, float y, float z)
  {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
  }
  void setPos(const float* x)
  {
    setPos(x[0], x[1], x[2]);
  }

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

};

class SpawnMountMessage : public NetMessage
{
  ptString name;
  ptString mesh;
  float pos[3];
  float rotation;
  unsigned short sectorid;

public:
  SpawnMountMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::SPAWNMOUNT)
  {
  }

  ~SpawnMountMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  ptString getMesh() const { return mesh; }
  void setMesh(ptString x) { mesh = x; }

  float* getPos() { return pos; }
  void setPos(float x, float y, float z)
  {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
  }
  void setPos(const float* x)
  {
    setPos(x[0], x[1], x[2]);
  }

  float getRotation() const { return rotation; }
  void setRotation(float x) { rotation = x; }

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

};

class SpawnDoorMessage : public NetMessage
{
  unsigned short doorid;
  ptString name;
  ptString mesh;
  unsigned short sectorid;
  float pos[3];
  bool isopen;
  bool islocked;
  ptString animation;

public:
  SpawnDoorMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::SPAWNDOOR)
  {
  }

  ~SpawnDoorMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned short getDoorId() const { return doorid; }
  void setDoorId(unsigned short x) { doorid = x; }

  ptString getName() const { return name; }
  void setName(ptString x) { name = x; }

  ptString getMesh() const { return mesh; }
  void setMesh(ptString x) { mesh = x; }

  unsigned short getSectorId() const { return sectorid; }
  void setSectorId(unsigned short x) { sectorid = x; }

  float* getPos() { return pos; }
  void setPos(float x, float y, float z)
  {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
  }
  void setPos(const float* x)
  {
    setPos(x[0], x[1], x[2]);
  }

  bool getIsOpen() const { return isopen; }
  void setIsOpen(bool x) { isopen = x; }

  bool getIsLocked() const { return islocked; }
  void setIsLocked(bool x) { islocked = x; }

  ptString getAnimation() const { return animation; }
  void setAnimation(ptString x) { animation = x; }

};

class RemoveSpawnedEntityMessage : public NetMessage
{
  unsigned int entityid;

public:
  RemoveSpawnedEntityMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::REMOVESPAWNEDENTITY)
  {
  }

  ~RemoveSpawnedEntityMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned int getEntityId() const { return entityid; }
  void setEntityId(unsigned int x) { entityid = x; }

};

class ToggleFlashStepMessage : public NetMessage
{

public:
  ToggleFlashStepMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::TOGGLEFLASHSTEP)
  {
  }

  ~ToggleFlashStepMessage()
  {
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

};

class CreateZoneMessage : public NetMessage
{
  unsigned short zoneid;
  ptString zonetype;
  class ListNodes
  {
  public:
    float x;
    float z;
  };

  unsigned char nodescount;
  ListNodes* nodes;


public:
  CreateZoneMessage() : NetMessage(MESSAGES::ADMIN,ADMIN::CREATEZONE)
  {
    nodes = 0;
  }

  ~CreateZoneMessage()
  {
    delete [] nodes;
  }

  bool serialise(ByteStream* bs);
  void deserialise(ByteStream* bs);

  unsigned short getZoneId() const { return zoneid; }
  void setZoneId(unsigned short x) { zoneid = x; }

  ptString getZoneType() const { return zonetype; }
  void setZoneType(ptString x) { zonetype = x; }

  unsigned char getNodesCount() const { return nodescount; }
  void setNodesCount(unsigned char ic)
  {
    nodescount = ic;
    delete [] nodes;
    nodes = new ListNodes[ic];
  }

  // --- begin ListNodes Getter and Setter ---

  float getX(size_t i) { return nodes[i].x; }
  void setX(size_t i, float x) { nodes[i].x = x; }

  float getZ(size_t i) { return nodes[i].z; }
  void setZ(size_t i, float x) { nodes[i].z = x; }

  // --- end ListNodes Getter and Setter ---

};

#endif // ADMINMESSAGES_H
