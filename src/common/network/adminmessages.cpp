/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "common/network/adminmessages.h"
#include "deserialiser.h"
#include "serialiser.h"

bool RemoveAllMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(datatype);
  return serial.isValid();
}

void RemoveAllMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  datatype = serial.getString();
}

bool SetConfigMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(option);
  serial.setString(value);
  return serial.isValid();
}

void SetConfigMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  option = serial.getString();
  value = serial.getString();
}

bool CreateItemMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itemtemplateid);
  serial.setString(name);
  serial.setString(icon);
  serial.setString(description);
  serial.setString(file);
  serial.setString(mesh);
  serial.setFloat(weight);
  serial.setString(equiptype);
  return serial.isValid();
}

void CreateItemMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itemtemplateid = (unsigned int) serial.getInt32();
  name = serial.getString();
  icon = serial.getString();
  description = serial.getString();
  file = serial.getString();
  mesh = serial.getString();
  weight = serial.getFloat();
  equiptype = serial.getString();
}

bool CreateSpawnPointMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itemtemplateid);
  serial.setFloat(position[0]);
  serial.setFloat(position[1]);
  serial.setFloat(position[2]);
  serial.setInt32(interval);
  return serial.isValid();
}

void CreateSpawnPointMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itemtemplateid = (unsigned int) serial.getInt32();
  position[0] = serial.getFloat();
  position[1] = serial.getFloat();
  position[2] = serial.getFloat();
  interval = (unsigned int) serial.getInt32();
}

bool SpawnItemMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itemtemplateid);
  serial.setFloat(position[0]);
  serial.setFloat(position[1]);
  serial.setFloat(position[2]);
  return serial.isValid();
}

void SpawnItemMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itemtemplateid = (unsigned int) serial.getInt32();
  position[0] = serial.getFloat();
  position[1] = serial.getFloat();
  position[2] = serial.getFloat();
}

bool SpawnMountMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  serial.setString(mesh);
  serial.setFloat(position[0]);
  serial.setFloat(position[1]);
  serial.setFloat(position[2]);
  serial.setFloat(rotation);
  return serial.isValid();
}

void SpawnMountMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = serial.getString();
  mesh = serial.getString();
  position[0] = serial.getFloat();
  position[1] = serial.getFloat();
  position[2] = serial.getFloat();
  rotation = serial.getFloat();
}

bool SpawnDoorMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setString(name);
  serial.setString(mesh);
  serial.setFloat(position[0]);
  serial.setFloat(position[1]);
  serial.setFloat(position[2]);
  serial.setInt8(isopen?1:0);
  serial.setInt8(islocked?1:0);
  serial.setString(animation);
  return serial.isValid();
}

void SpawnDoorMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = (unsigned int) serial.getInt32();
  name = serial.getString();
  mesh = serial.getString();
  position[0] = serial.getFloat();
  position[1] = serial.getFloat();
  position[2] = serial.getFloat();
  isopen = serial.getInt8() != 0;
  islocked = serial.getInt8() != 0;
  animation = serial.getString();
}

bool RemoveSpawnedEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  return serial.isValid();
}

void RemoveSpawnedEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = (unsigned int) serial.getInt32();
}

bool ToggleFlashStepMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  return serial.isValid();
}

void ToggleFlashStepMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
}

bool CreateZoneMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt16(zoneid);
  serial.setString(zonetype);
  serial.setInt24(nodescount);
  for ( size_t i = 0; i < nodescount ; i++ )
  {
    serial.setFloat(nodes[i].x);
    serial.setFloat(nodes[i].z);
  };

  return serial.isValid();
}

void CreateZoneMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  zoneid = (unsigned short) serial.getInt16();
  zonetype = serial.getString();
  nodescount = (unsigned int) serial.getInt24();
  setNodesCount(nodescount);
  for ( size_t i = 0; i < nodescount ; i++ )
  {
    nodes[i].x = serial.getFloat();
    nodes[i].z = serial.getFloat();
  };

}

bool SetDateMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(seconds);
  return serial.isValid();
}

void SetDateMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  seconds = (unsigned int) serial.getInt32();
}

bool CreateChanDefaultMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(usetype);
  serial.setString(group);
  serial.setInt8(permanent?1:0);
  return serial.isValid();
}

void CreateChanDefaultMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  usetype = (unsigned char) serial.getInt8();
  group = serial.getString();
  permanent = serial.getInt8() != 0;
}

bool CreateChanSpaceMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  serial.setString(form);
  serial.setString(createtype);
  serial.setInt16(createval);
  serial.setInt8(createperm?1:0);
  serial.setString(jointype);
  serial.setInt16(joinval);
  serial.setInt8(joinperm?1:0);
  serial.setString(invitetype);
  serial.setInt16(inviteval);
  serial.setInt8(vischannel?1:0);
  serial.setInt8(vismembers?1:0);
  return serial.isValid();
}

void CreateChanSpaceMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = serial.getString();
  form = serial.getString();
  createtype = serial.getString();
  createval = (unsigned short) serial.getInt16();
  createperm = serial.getInt8() != 0;
  jointype = serial.getString();
  joinval = (unsigned short) serial.getInt16();
  joinperm = serial.getInt8() != 0;
  invitetype = serial.getString();
  inviteval = (unsigned short) serial.getInt16();
  vischannel = serial.getInt8() != 0;
  vismembers = serial.getInt8() != 0;
}

