/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "common/network/adminmessages.h"
#include "deserialiser.h"
#include "serialiser.h"

bool SetConfigMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(option);
  serial.setString(value);
  return serial.isValid();
}

void SetConfigMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  option = static_cast<ptString>(serial.getString());
  value = static_cast<ptString>(serial.getString());
}

bool CreateMeshMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(revision);
  serial.setString(file);
  serial.setString(factory);
  return serial.isValid();
}

void CreateMeshMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  revision = static_cast<unsigned int>(serial.getInt32());
  file = static_cast<ptString>(serial.getString());
  factory = static_cast<ptString>(serial.getString());
}

bool CreateSpawnPointMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itemtemplateid);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setInt32(interval);
  return serial.isValid();
}

void CreateSpawnPointMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itemtemplateid = static_cast<unsigned int>(serial.getInt32());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  interval = static_cast<unsigned int>(serial.getInt32());
}

bool SpawnItemMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(itemtemplateid);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  return serial.isValid();
}

void SpawnItemMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  itemtemplateid = static_cast<unsigned int>(serial.getInt32());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
}

bool SpawnMountMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  serial.setString(species);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setFloat(rotation);
  return serial.isValid();
}

void SpawnMountMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = static_cast<ptString>(serial.getString());
  species = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  rotation = static_cast<float>(serial.getFloat());
}

bool SpawnDoorMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  serial.setString(name);
  serial.setString(mesh);
  serial.setFloat(position.x());
  serial.setFloat(position.y());
  serial.setFloat(position.z());
  serial.setInt8(isopen);
  serial.setInt8(islocked);
  serial.setString(animation);
  return serial.isValid();
}

void SpawnDoorMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
  name = static_cast<ptString>(serial.getString());
  mesh = static_cast<ptString>(serial.getString());
  position.x() = serial.getFloat();
  position.y() = serial.getFloat();
  position.z() = serial.getFloat();
  isopen = static_cast<bool>(serial.getInt8());
  islocked = static_cast<bool>(serial.getInt8());
  animation = static_cast<ptString>(serial.getString());
}

bool RemoveSpawnedEntityMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(entityid);
  return serial.isValid();
}

void RemoveSpawnedEntityMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  entityid = static_cast<unsigned int>(serial.getInt32());
}

bool ToggleFlashStepMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  return serial.isValid();
}

void ToggleFlashStepMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
}

bool CreateZoneMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt16(zoneid);
  serial.setString(zonetype);
  serial.setInt24(nodescount);
  for ( size_t i = 0; i < nodescount ; i++ )
  {
    serial.setFloat(nodes[i].x);
    serial.setFloat(nodes[i].z);
  };

  return serial.isValid();
}

void CreateZoneMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  zoneid = static_cast<unsigned short>(serial.getInt16());
  zonetype = static_cast<ptString>(serial.getString());
  nodescount = static_cast<unsigned int>(serial.getInt24());
  setNodesCount(nodescount);
  for (size_t i = 0; i < nodescount ; ++i)
  {
    nodes[i].x = static_cast<float>(serial.getFloat());
    nodes[i].z = static_cast<float>(serial.getFloat());
  };

}

bool SetDateMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(seconds);
  return serial.isValid();
}

void SetDateMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  seconds = static_cast<unsigned int>(serial.getInt32());
}

bool CreateChanDefaultMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(isinitchan);
  serial.setString(group);
  serial.setInt8(permanent);
  return serial.isValid();
}

void CreateChanDefaultMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  isinitchan = static_cast<bool>(serial.getInt8());
  group = static_cast<ptString>(serial.getString());
  permanent = static_cast<bool>(serial.getInt8());
}

bool CreateChanSpaceMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  serial.setString(form);
  serial.setString(createtype);
  serial.setInt16(createval);
  serial.setInt8(createperm);
  serial.setString(jointype);
  serial.setInt16(joinval);
  serial.setInt8(joinperm);
  serial.setString(invitetype);
  serial.setInt16(inviteval);
  serial.setInt8(vischannel);
  serial.setInt8(vismembers);
  return serial.isValid();
}

void CreateChanSpaceMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = static_cast<ptString>(serial.getString());
  form = static_cast<ptString>(serial.getString());
  createtype = static_cast<ptString>(serial.getString());
  createval = static_cast<unsigned short>(serial.getInt16());
  createperm = static_cast<bool>(serial.getInt8());
  jointype = static_cast<ptString>(serial.getString());
  joinval = static_cast<unsigned short>(serial.getInt16());
  joinperm = static_cast<bool>(serial.getInt8());
  invitetype = static_cast<ptString>(serial.getString());
  inviteval = static_cast<unsigned short>(serial.getInt16());
  vischannel = static_cast<bool>(serial.getInt8());
  vismembers = static_cast<bool>(serial.getInt8());
}

bool CreateLocationMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  return serial.isValid();
}

void CreateLocationMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = static_cast<ptString>(serial.getString());
}

bool TeleportLocationMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setString(name);
  return serial.isValid();
}

void TeleportLocationMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  name = static_cast<ptString>(serial.getString());
}

