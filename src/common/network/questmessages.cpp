/*
    Copyright (C) 2008 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//  !! This file was automatically generated by a network code generator   !!
//  !! Do not change this file since all changes will be overwritten later !!
//  !! Instead please change the source files here: peragro/data/generate  !!

#include "common/network/questmessages.h"
#include "deserialiser.h"
#include "serialiser.h"

bool NpcDialogMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(dialogid);
  serial.setString(dialogtext);
  serial.setInt24(answerscount);
  for ( size_t i = 0; i < answerscount ; i++ )
  {
    serial.setInt32(answers[i].answerid);
    serial.setString(answers[i].answertext);
  };

  return serial.isValid();
}

void NpcDialogMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  dialogid = static_cast<unsigned int>(serial.getInt32());
  serial.getString(dialogtext);
  answerscount = static_cast<unsigned int>(serial.getInt24());
  setAnswersCount(answerscount);
  for (size_t i = 0; i < answerscount ; ++i)
  {
    answers[i].answerid = static_cast<unsigned int>(serial.getInt32());
    serial.getString(answers[i].answertext);
  };

}

bool NpcDialogAnswerMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(dialogid);
  serial.setInt32(answerid);
  return serial.isValid();
}

void NpcDialogAnswerMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  dialogid = static_cast<unsigned int>(serial.getInt32());
  answerid = static_cast<unsigned int>(serial.getInt32());
}

bool NpcStartDialogMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(npcid);
  return serial.isValid();
}

void NpcStartDialogMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  npcid = static_cast<unsigned int>(serial.getInt32());
}

bool NpcEndDialogMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt32(npcid);
  return serial.isValid();
}

void NpcEndDialogMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  npcid = static_cast<unsigned int>(serial.getInt32());
}

bool SetupDialogsMessage::serialise(ByteStream* bs)
{
  Serialiser serial(bs);
  serial.setInt8(type);
  serial.setInt8(id);
  serial.setInt8(deleteexisting);
  serial.setInt24(dialogscount);
  for ( size_t i = 0; i < dialogscount ; i++ )
  {
    serial.setString(dialogs[i].npcname);
    serial.setInt32(dialogs[i].dialogid);
    serial.setString(dialogs[i].action);
    serial.setString(dialogs[i].value);
  };

  serial.setInt24(answerscount);
  for ( size_t i = 0; i < answerscount ; i++ )
  {
    serial.setString(answers[i].answernpcname);
    serial.setInt32(answers[i].answerdialogid);
    serial.setInt32(answers[i].answerid);
    serial.setString(answers[i].answertext);
    serial.setInt32(answers[i].answerlink);
    serial.setInt8(answers[i].isendanswer);
  };

  return serial.isValid();
}

void SetupDialogsMessage::deserialise(ByteStream* bs)
{
  Deserialiser serial(bs);
  type = serial.getInt8();
  id = serial.getInt8();
  deleteexisting = static_cast<bool>(serial.getInt8());
  dialogscount = static_cast<unsigned int>(serial.getInt24());
  setDialogsCount(dialogscount);
  for (size_t i = 0; i < dialogscount ; ++i)
  {
    dialogs[i].npcname = static_cast<ptString>(serial.getString());
    dialogs[i].dialogid = static_cast<unsigned int>(serial.getInt32());
    dialogs[i].action = static_cast<ptString>(serial.getString());
    serial.getString(dialogs[i].value);
  };

  answerscount = static_cast<unsigned int>(serial.getInt24());
  setAnswersCount(answerscount);
  for (size_t i = 0; i < answerscount ; ++i)
  {
    answers[i].answernpcname = static_cast<ptString>(serial.getString());
    answers[i].answerdialogid = static_cast<unsigned int>(serial.getInt32());
    answers[i].answerid = static_cast<unsigned int>(serial.getInt32());
    serial.getString(answers[i].answertext);
    answers[i].answerlink = static_cast<unsigned int>(serial.getInt32());
    answers[i].isendanswer = static_cast<bool>(serial.getInt8());
  };

}

