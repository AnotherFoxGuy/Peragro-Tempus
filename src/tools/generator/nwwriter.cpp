/*
    Copyright (C) 2007 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include "nwwriter.h"

#include "network.h"

#include <algorithm>
#include <iostream>

/// \todo: It would be better to use a template rather than hardcode everything.

nwWriter::nwWriter(nwNetwork* nw) : nw(nw)
{
}

std::string nwWriter::toConst(std::string str)
{
  std::transform(str.begin(), str.end(), str.begin(), toupper);
  return str;
}

std::string nwWriter::toVariable(std::string str)
{
  std::transform(str.begin(), str.end(), str.begin(), tolower);
  //str.insert(0, "m_");
  return str;
}

std::string nwWriter::toFunction(std::string str)
{
  str[0] = (char) tolower(str[0]);
  return str;
}

void nwWriter::writeLicenceHeader(std::ofstream& out)
{
  out <<
    "/*\n"
    "    Copyright (C) 2008 Development Team of Peragro Tempus\n\n"

    "    This program is free software; you can redistribute it and/or modify\n"
    "    it under the terms of the GNU General Public License as published by\n"
    "    the Free Software Foundation; either version 2 of the License, or\n"
    "    (at your option) any later version.\n\n"

    "    This program is distributed in the hope that it will be useful,\n"
    "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
    "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
    "    GNU General Public License for more details.\n\n"

    "    You should have received a copy of the GNU General Public License\n"
    "    along with this program; if not, write to the Free Software\n"
    "    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"
    "*/\n\n";

  out <<
    "//  !! This file was automatically generated by a network code generator   !!\n"
    "//  !! Do not change this file since all changes will be overwritten later !!\n"
    "//  !! Instead please change the source files here: peragro/data/generate  !!\n\n";
}

void nwWriter::writeNetwork(std::ofstream& out)
{
  writeLicenceHeader(out);

  out << "#ifndef NWTYPES_H\n";
  out << "#define NWTYPES_H\n";

  out << "\n"
         "#define MSG_NET_VERSION " << nw->netId << "\n"
         "\n";

  size_t i = 0;
  for (i = 0; i < nw->peers.size(); i++)
  {
    out << "#define MSG_" << toConst(nw->peers[i]->name)
        << "_PEER_VERSION " << nw->peers[i]->netId << "\n";
  }

  out << "\n"
         "#define MSG_HANDLER_COUNT " << nw->types.size() << "\n"
         "\n"
         "namespace MESSAGES\n"
         "{\n"
         "  enum HANDLERS\n"
         "  {\n";

  for (i = 0; i < nw->types.size()-1; i++)
  {
    out <<  "    " << toConst(nw->types[i]->name) <<
            "=" << nw->types[i]->id << ",\n";
  }
  out << "    " << toConst(nw->types[i]->name) <<
         "=" << nw->types[i]->id << "\n";

  out << "  };\n"
         "}\n"
         "\n";

  out << "#endif // NWTYPES_H\n";
}

void nwWriter::writeParamDeclaration(std::ofstream& out, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "  ptString " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "  const char* " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "  bool " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "  unsigned char " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "  unsigned short " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "  unsigned int " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "  char " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "  short " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "  int " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "  float " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "  unsigned char " << toVariable(param->name) << "[3];\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "  WFMath::Point<3> " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    out <<  "  class List" << param->name << "\n"
        <<  "  {\n"
        <<  "  public:\n";

    for ( size_t i=0; i < param->params.size(); i++ )
    {
      writeParamListDefinition(out, param->params[i]);
    }

    out <<  "  };\n\n";
    out <<  "  unsigned int " << toVariable(param->name) << "count;\n";
    out <<  "  List" << param->name << "* " << toVariable(param->name) << ";\n\n";
  }
}

void nwWriter::writeParamSerialisation(std::ofstream& out, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "  serial.setString(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "  serial.setString(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "  serial.setInt8(" << toVariable(param->name) << "?1:0);\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "  serial.setInt8(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "  serial.setInt16(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "  serial.setInt32(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "  serial.setInt8(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "  serial.setInt16(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "  serial.setInt32(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "  serial.setFloat(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "  serial.setInt8(" << toVariable(param->name) << "[0]);\n";
    out <<  "  serial.setInt8(" << toVariable(param->name) << "[1]);\n";
    out <<  "  serial.setInt8(" << toVariable(param->name) << "[2]);\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "  serial.setFloat(" << toVariable(param->name) << "[0]);\n";
    out <<  "  serial.setFloat(" << toVariable(param->name) << "[1]);\n";
    out <<  "  serial.setFloat(" << toVariable(param->name) << "[2]);\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    out <<  "  serial.setInt24(" << toVariable(param->name) << "count);\n"
        <<  "  for ( size_t i = 0; i < " << toVariable(param->name) << "count ; i++ )\n"
        <<  "  {\n";

    for ( size_t i=0; i < param->params.size(); i++ )
    {
      writeParamListSerialisation(out, param->name, param->params[i]);
    }

    out <<  "  };\n\n";
  }
}

void nwWriter::writeParamDeserialisation(std::ofstream& out, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "  " << toVariable(param->name) << " = serial.getString();\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "  serial.getString(" << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "  " << toVariable(param->name) << " = serial.getInt8() != 0;\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "  " << toVariable(param->name) << " = (unsigned char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "  " << toVariable(param->name) << " = (unsigned short) serial.getInt16();\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "  " << toVariable(param->name) << " = (unsigned int) serial.getInt32();\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "  " << toVariable(param->name) << " = (char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "  " << toVariable(param->name) << " = (short) serial.getInt16();\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "  " << toVariable(param->name) << " = (int) serial.getInt32();\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "  " << toVariable(param->name) << " = serial.getFloat();\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "  " << toVariable(param->name) << "[0] = (unsigned char) serial.getInt8();\n";
    out <<  "  " << toVariable(param->name) << "[1] = (unsigned char) serial.getInt8();\n";
    out <<  "  " << toVariable(param->name) << "[2] = (unsigned char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "  " << toVariable(param->name) << "[0] = serial.getFloat();\n";
    out <<  "  " << toVariable(param->name) << "[1] = serial.getFloat();\n";
    out <<  "  " << toVariable(param->name) << "[2] = serial.getFloat();\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    out <<  "  " << toVariable(param->name) << "count = (unsigned int) serial.getInt24();\n"
        <<  "  set" << param->name << "Count(" << toVariable(param->name) << "count);\n"
        <<  "  for ( size_t i = 0; i < " << toVariable(param->name) << "count ; i++ )\n"
        <<  "  {\n";

    for ( size_t i=0; i < param->params.size(); i++ )
    {
      writeParamListDeserialisation(out, param->name, param->params[i]);
    }

    out <<  "  };\n\n";
  }
}

void nwWriter::writeParamGetterSetter(std::ofstream& out, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "  ptString get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(ptString x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "  const char* get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(const char* x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "  bool get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(bool x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "  unsigned char get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(unsigned char x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "  unsigned short get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(unsigned short x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "  unsigned int get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(unsigned int x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "  char get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(char x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "  short get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(short x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "  int get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(int x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "  float get" << param->name << "() const { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(float x) { "
        << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "  unsigned char* get" << param->name << "() { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(unsigned char r, unsigned char g, unsigned char b)\n"
        <<  "  {\n"
        <<  "    " << toVariable(param->name) << "[0] = r;\n"
        <<  "    " << toVariable(param->name) << "[1] = g;\n"
        <<  "    " << toVariable(param->name) << "[2] = b;\n"
        <<  "  }\n"
        <<  "  void set" << param->name << "(const unsigned char* x)\n"
        <<  "  {\n"
        <<  "    set" << param->name << "(x[0], x[1], x[2]);\n"
        <<  "  }\n\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "  WFMath::Point<3> get" << param->name << "() { return "
        << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(const WFMath::Point<3>& x)\n"
        <<  "  {\n"
        <<  "    " << toVariable(param->name) << " = x;\n"
        <<  "  }\n"
        <<  "  void set" << param->name << "(float x, float y, float z)\n"
        <<  "  {\n"
        <<  "    " << toVariable(param->name) << "[0] = x;\n"
        <<  "    " << toVariable(param->name) << "[1] = y;\n"
        <<  "    " << toVariable(param->name) << "[2] = z;\n"
        <<  "  }\n\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    out <<  "  unsigned char get" << param->name << "Count() const { return "
        <<  toVariable(param->name) << "count; }\n"
        <<  "  void set" << param->name << "Count(unsigned char ic)\n"
        <<  "  {\n"
        <<  "    " << toVariable(param->name) << "count = ic;\n"
        <<  "    delete [] " << toVariable(param->name) << ";\n"
        <<  "    " << toVariable(param->name) << " = new List" << param->name
        <<  "[ic];\n"
        <<  "  }\n\n";

    out <<  "  // --- begin List" << param->name << " Getter and Setter ---\n\n";

    for ( size_t i=0; i < param->params.size(); i++ )
    {
      writeParamListGetterSetter(out, param->name, param->params[i]);
    }
    out <<  "  // --- end List" << param->name << " Getter and Setter ---\n\n";
  }
}

void nwWriter::writeParamListDefinition(std::ofstream& out, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "    ptString " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "    const char* " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "    bool " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "    unsigned char " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "    unsigned short " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "    unsigned int " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "    char " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "    short " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "    int " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "    float " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "    unsigned char " << toVariable(param->name) << "[3];\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "    WFMath::Point<3> " << toVariable(param->name) << ";\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    std::cerr << "Error! Nested Lists are not yet supported!";
  }
}

void nwWriter::writeParamListSerialisation(std::ofstream& out, std::string listname, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "    serial.setString(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "    serial.setString(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << "?1:0);\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "    serial.setInt16(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "    serial.setInt32(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "    serial.setInt16(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "    serial.setInt32(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "    serial.setFloat(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[0]);\n";
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[1]);\n";
    out <<  "    serial.setInt8(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[2]);\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "    serial.setFloat(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[0]);\n";
    out <<  "    serial.setFloat(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[1]);\n";
    out <<  "    serial.setFloat(" << toVariable(listname) << "[i]." << toVariable(param->name) << "[2]);\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    // Not yet supported
  }
}

void nwWriter::writeParamListDeserialisation(std::ofstream& out, std::string listname, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = serial.getString();\n";
  }
  if (param->type == nwParamType::TEXT)
  {
    out <<  "    serial.getString(" << toVariable(listname) << "[i]." << toVariable(param->name) << ");\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = serial.getInt8() != 0;\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (unsigned char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (unsigned short) serial.getInt16();\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (unsigned int) serial.getInt32();\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (short) serial.getInt16();\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = (int) serial.getInt32();\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = serial.getFloat();\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[0] = (unsigned char) serial.getInt8();\n";
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[1] = (unsigned char) serial.getInt8();\n";
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[2] = (unsigned char) serial.getInt8();\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[0] = serial.getFloat();\n";
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[1] = serial.getFloat();\n";
    out <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[2] = serial.getFloat();\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    // Not yet supported
  }
}

void nwWriter::writeParamListGetterSetter(std::ofstream& out, std::string listname, nwParams* param)
{
  if (param->type == nwParamType::STRING)
  {
    out <<  "  ptString get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, ptString x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::TEXT)
  {
    out <<  "  const char* get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]."<< toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, const char* x) { "
        << toVariable(listname) << "[i]."<< toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::BOOL)
  {
    out <<  "  bool get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, bool x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT8)
  {
    out <<  "  unsigned char get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, unsigned char x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT16)
  {
    out <<  "  unsigned short get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, unsigned short x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::UINT32)
  {
    out <<  "  unsigned int get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, unsigned int x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT8)
  {
    out <<  "  char get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, char x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT16)
  {
    out <<  "  short get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, short x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::INT32)
  {
    out <<  "  int get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, int x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::FLOAT)
  {
    out <<  "  float get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, float x) { "
        << toVariable(listname) << "[i]." << toVariable(param->name) << " = x; }\n\n";
  }
  else if (param->type == nwParamType::COLOUR24)
  {
    out <<  "  unsigned char* get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, unsigned char r, unsigned char g, unsigned char b)\n"
        <<  "  {\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[0] = r;\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[1] = g;\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[2] = b;\n"
        <<  "  }\n"
        <<  "  void set" << param->name << "(size_t i, const unsigned char* x)\n"
        <<  "  {\n"
        <<  "    set" << param->name << "(i, x[0], x[1], x[2]);\n"
        <<  "  }\n\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    out <<  "  WFMath::Point<3> get" << param->name << "(size_t i) { return "
        << toVariable(listname) << "[i]." << toVariable(param->name) << "; }\n"
        <<  "  void set" << param->name << "(size_t i, const WFMath::Point<3>& x)\n"
        <<  "  {\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << " = x;\n"
        <<  "  }\n"
        <<  "  void set" << param->name << "(size_t i, float x, float y, float z)\n"
        <<  "  {\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[0] = x;\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[1] = y;\n"
        <<  "    " << toVariable(listname) << "[i]." << toVariable(param->name) << "[2] = z;\n"
        <<  "  }\n\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    // Not yet supported
  }
}

void nwWriter::writeTypeHead(std::ofstream& out, nwType* type)
{
  writeLicenceHeader(out);

  out << "#ifndef " << toConst(type->name) << "MESSAGES_H\n";
  out << "#define " << toConst(type->name) << "MESSAGES_H\n\n";

  out << "#include \"netmessage.h\"\n\n";

  out << "namespace " << toConst(type->name) << "\n"
         "{\n"
         "  enum MESSAGES\n"
         "  {\n";

  size_t i = 0;
  for (i = 0; i < type->msgs.size()-1; i++)
  {
    out <<  "    " << toConst(type->msgs[i]->name) <<
            "=" << type->msgs[i]->id << ",\n";
  }
  out << "    " << toConst(type->msgs[i]->name) <<
         "=" << type->msgs[i]->id << "\n";

  out << "  };\n"
         "}\n\n";

  for (i = 0; i < type->msgs.size(); i++)
  {
    nwMessage* msg = type->msgs[i];

    out << "class " << msg->name << "Message : public NetMessage\n"
           "{\n";

    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      writeParamDeclaration(out, param);
    }

    out << "\n"
           "public:\n"
           "  " << msg->name.c_str ()<< "Message() : NetMessage(MESSAGES::" <<
           toConst(type->name) << "," << toConst(type->name) <<
           "::" << toConst(msg->name) << ")\n"
           "  {\n";
    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      if (param->type == nwParamType::LIST)
      {
        out << "    " << toVariable(param->name) << " = 0;\n";
      }
/*
      else if (param->type == nwParamType::BOOL)
      {
        out << "    " << toVariable(param->name) << " = false;\n";
      }
      else if (param->type == nwParamType::UINT8 ||
                 param->type == nwParamType::UINT16 ||
                 param->type == nwParamType::UINT32)
      {
        out << "    " << toVariable(param->name) << " = 0;\n";
      }
      else if (param->type == nwParamType::FLOAT)
      {
        out << "    " << toVariable(param->name) << " = 0.0;\n";
      }
      else if (param->type == nwParamType::VECTOR3F)
      {
        out << "    " << toVariable(param->name) << ".x = 0.0;\n";
        out << "    " << toVariable(param->name) << ".y = 0.0;\n";
        out << "    " << toVariable(param->name) << ".z = 0.0;\n";
      }
      else if (param->type == nwParamType::COLOUR24)
      {
        out << "    " << toVariable(param->name) << "[0] = \'\\0\';\n";
        out << "    " << toVariable(param->name) << "[1] = \'\\0\';\n";
        out << "    " << toVariable(param->name) << "[2] = \'\\0\';\n";
      }
      else if (param->type == nwParamType::TEXT)
      {
        out << "    " << toVariable(param->name) << " = \'\\0\';\n";
      }
      else if (param->type == nwParamType::COLOUR24)
      {
        out << "    " << toVariable(param->name) << "[0] = \'\\0\';\n";
        out << "    " << toVariable(param->name) << "[1] = \'\\0\';\n";
        out << "    " << toVariable(param->name) << "[2] = \'\\0\';\n";
      }
*/
    }

    out << "  }\n\n"
           "  ~" << msg->name.c_str ()<< "Message()\n" <<
           "  {\n";

    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      if (param->type == nwParamType::LIST)
      {
        out << "    delete [] " << toVariable(param->name) << ";\n";
      }
    }

    out << "  }\n\n"
           "  bool serialise(ByteStream* bs);\n"
           "  void deserialise(ByteStream* bs);\n\n";

    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      writeParamGetterSetter(out, param);
//      out << "  unsigned " << param->type << " get" << param->name
//          << "() { return " << param->name << "; }\n"
//          << "  void set" << param->name << "(" << param->type
//          << " x) { " << param->name << " = x; }\n\n";
    }

    out << "};\n\n";
  }

  out << "#endif // "<< toConst(type->name) <<"MESSAGES_H\n";
}

void nwWriter::writeTypeImpl(std::ofstream& out, nwType* type)
{
  writeLicenceHeader(out);

  out << "#include \"common/network/" << toVariable(type->name) << "messages.h\"\n"
      << "#include \"deserialiser.h\"\n"
      << "#include \"serialiser.h\"\n\n";

  for (size_t i = 0; i < type->msgs.size(); i++)
  {
    nwMessage* msg = type->msgs[i];

    out << "bool " << msg->name.c_str ()<< "Message::serialise(ByteStream* bs)\n"
           "{\n"
           "  Serialiser serial(bs);\n"
           "  serial.setInt8(type);\n"
           "  serial.setInt8(id);\n";

    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      writeParamSerialisation(out, param);
    }
    out << "  return serial.isValid();\n"
           "}\n"
           "\n"
           "void " << msg->name.c_str ()<< "Message::deserialise(ByteStream* bs)\n"
           "{\n"
           "  Deserialiser serial(bs);\n"
           "  type = serial.getInt8();\n"
           "  id = serial.getInt8();\n";

    for (size_t j = 0; j < msg->params.size(); j++)
    {
      nwParams* param = msg->params[j];
      writeParamDeserialisation(out, param);
    }

    out << "}\n\n";
  }
}

void nwWriter::writeHandler(std::ofstream& out, nwPeer* peer, nwType* type)
{
  writeLicenceHeader(out);

  out << "#ifndef " << toConst(type->name) << "HANDLER_H\n";
  out << "#define " << toConst(type->name) << "HANDLER_H\n\n";

  out << "#include \"common/network/nwtypes.h\"\n";
  out << "#include \"common/network/messagehandler.h\"\n\n";
  out << "#include \"common/network/" << toVariable(type->name) << "messages.h\"\n\n";

  //out << "class " << peer->name << ";\n\n";

  out << "class " << type->name << "Handler : public MessageHandler\n"
      << "{\n"
      //<< "private:\n"
      //<< "  " << peer->name << "* " << toVariable(peer->name) << ";\n\n"

      << "public:\n"
      << "  " << type->name << "Handler(" /* << peer->name << "* "
      << toVariable(peer->name) */ << ")\n"
      //<< "  : " << toVariable(peer->name) << "(" << toVariable(peer->name) << ")\n"
      << "  {\n"
      << "  }\n\n"

      << "  char getType() { return MESSAGES::" << toConst(type->name) << "; }\n\n"

      << "  void handle(GenericMessage* msg)\n"
      << "  {\n"
      << "    char type = msg->getMsgType();\n"
      << "    if (type != MESSAGES::" << toConst(type->name)
      << ") assert(\"wrong message type\");\n";

  for (size_t i = 0, n = 0; i < peer->recvMsg.size(); i++)
  {
    nwMessage* msg = peer->recvMsg[i];
    if (!msg || msg->type != type)
      continue;

    if (n == 0)
    {
      out << "    char id = msg->getMsgId();\n\n";

      out << "    if (id == " << toConst(type->name)
          << "::" << toConst(msg->name) << ") handle"
          << msg->name << "(msg);\n";
    }
    else
    {
      out << "    else if (id == " << toConst(type->name)
          << "::" << toConst(msg->name) << ") handle"
          << msg->name << "(msg);\n";
    }

    n++;
  }

  out << "  }\n\n";

  for (size_t i = 0; i < peer->recvMsg.size(); i++)
  {
    nwMessage* msg = peer->recvMsg[i];
    if (!msg || msg->type != type)
      continue;

    out << "  void handle" << msg->name << "(GenericMessage* msg);\n";
  }

  out << "};\n\n";

  out << "#endif // " << toConst(type->name) << "HANDLER_H\n";
}


void nwWriter::writeHandlerImplementation(std::ofstream& out, nwPeer* peer, nwType* type)
{
  writeLicenceHeader(out);

  out << "#include \"client/network/" << toVariable(type->name) << "handler.h\"\n\n";

  out << "#include \"common/event/eventmanager.h\"\n";
  out << "#include \"common/event/entityevent.h\"\n\n";
  out << "#include \"client/pointer/pointer.h\"\n\n";

  if (type->name == "Combat") {
    out << "#include \"client/network/combathandler.h\"\n\n";
  }

  for (size_t i = 0; i < peer->recvMsg.size(); i++)
  {
    nwMessage* msg = peer->recvMsg[i];
    if (!msg || msg->type != type)
      continue;

    out << "void " << type->name << "Handler::" << "handle" << msg->name << "(GenericMessage* msg)\n"
    << "{\n"
    << "  " << msg->name << "Message" << " pmsg;\n"
    << "  pmsg.deserialise(msg->getByteStream());\n\n";
    out << "  using namespace PT::Events;\n";
    out << "  EventManager* evmgr = PointerLibrary::getInstance()->getEventManager();\n";

    typedef std::map<std::string, std::vector<nwParams*> > EventAndParams;
    EventAndParams eventAndParams;

    // Add all the events from the message.
    std::map<std::string, bool>::iterator msgIt;
    for(msgIt = msg->eventNames.begin(); msgIt!=msg->eventNames.end(); ++msgIt)
    {
      eventAndParams[msgIt->first];
    }

    // Add the params to the events.
    for (size_t i = 0; i < msg->params.size(); i++)
    {
      nwParams* param = msg->params[i];
      std::map<std::string, bool>::iterator it;
      for(it = param->eventNames.begin(); it!=param->eventNames.end(); ++it)
      {
        eventAndParams[it->first].push_back(param);
      }
    }

    EventAndParams::iterator it;
    for(it = eventAndParams.begin(); it!=eventAndParams.end(); ++it)
    {
      std::string eventName = it->first;

      if(eventName.empty())
      {
        out << "\n  // @todo Implement me!\n\n";
        continue;
      }

      nwParams* entSpecPar = 0;
      for (size_t i = 0; i < it->second.size(); i++)
      {
        if(it->second[i]->eventNames[eventName])
        {
          entSpecPar = it->second[i];
          break;
        }
      }

      std::string indt = "  ";
      out << indt << "{\n";
      indt = "    ";
      out << indt << "csRef<iEvent> pEvent = evmgr->CreateEvent(";
      if(entSpecPar)
      {
        out << "EntityHelper::MakeEntitySpecific(";
        out << "\"" << eventName << "\"";
        out << ", pmsg." << toGetFunction(entSpecPar->name)<< ")";
      }
      else
        out << "\"" << eventName << "\"";
      out << ", true);\n";

      for (size_t i = 0; i < it->second.size(); i++)
      {
        nwParams* param = it->second[i];
        writeParam(out, param, "pEvent", "", 1);
      }

      out << "\n";
      out << indt << "evmgr->AddEvent(pEvent);\n";
      indt = "  ";
      out << indt << "}\n\n";
    }

    out << "} // end " << "handle" << msg->name << "\n\n";
  }
}

std::string nwWriter::toGetFunction(std::string str, std::string arg)
{
  std::string funct = "get";
  funct += str + "(";
  funct += arg + ")";
  return funct;
}

void nwWriter::writeParam(std::ofstream& out, nwParams* param, const std::string& eventname, const std::string& arg, size_t indent)
{
  std::string indt = "  ";
  for (size_t j = 0; j < indent; j++)
  {
    indt += "  ";
  }

  // results in "paramName".
  std::string paramNameStr = "\"" + toFunction(param->name) + "\"";

  if (param->type == nwParamType::STRING || param->type == nwParamType::COLOUR24)
  {
    // if its a ptString or uchar*, derefrence it.
    std::string value = "*pmsg.";
    value += toGetFunction(param->name, arg);
    if (param->type == nwParamType::STRING)
      value = value + "?" + value + ":\"\""; // Don't add 0 values!
    out << indt << eventname << "->Add(" << paramNameStr << ", " << value << ");\n";
  }
  else if (param->type == nwParamType::VECTOR3F)
  {
    std::string value = "pmsg.";
    value += toGetFunction(param->name, arg);
    if (param->name == "Pos")
      out << indt << "PT::Events::EntityHelper::SetPosition(" << eventname << ", " << value << ");\n";
    else
      out << indt << "PT::Events::EntityHelper::SetVector3(" << eventname << ", " << paramNameStr << ", "<< value << ");\n";
  }
  else if (param->type == nwParamType::LIST)
  {
    std::string listName = "\"" + toFunction(param->name) + "List\"";
    out << indt << "csRef<iEvent> "<< listName  <<" = evmgr->CreateEvent(" << listName  << ", true);\n"
        << indt << "for (unsigned char i = 0; i < pmsg.get" << param->name << "Count(); i++)\n"
        << indt << "{\n"
        << indt << "  std::stringstream itemName;\n"
        << indt << "  itemName << " << paramNameStr << " << \"_\" << i;\n"
        << indt << "  csRef<iEvent> item = evmgr->CreateEvent(itemName.str().c_str(), true);\n";
    for (size_t j = 0; j < param->params.size(); j++)
    {
      nwParams* listParam = param->params[j];
      writeParam(out, listParam, "item", "i", indent + 1);
    }
    out << indt <<  "  " << listName << "->Add(itemName.str().c_str(), item);\n";
    out << indt << "}\n";
    out << indt <<  eventname << "->Add(" << listName << ", list);\n";
  }
  else
  {
    std::string value = "pmsg.";
    value += toGetFunction(param->name, arg);
    out << indt << eventname << "->Add(" << paramNameStr << ", " << value << ");\n";
  }
}

