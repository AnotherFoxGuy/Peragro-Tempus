#!/bin/bash

# PeragroBuilder is copyrighted by Peragro Tempus Team
# PTBuild is released under the General Public license (Please refer to GPL.txt)
# Written By Brant Watson (aka Induane)


# Set some easy initial variables. Defaults should work fine but this way they can be easily changed.
VERSION="0.1"
PASS_TRIES=3
CHECKOUT_TRIES=3
CS_SVN='https://crystal.svn.sourceforge.net/svnroot/crystal/CS/trunk CS_latest'
CEL_SVN='https://cel.svn.sourceforge.net/svnroot/cel/cel/trunk CEL_latest'
CEGUI_DL='http://prdownloads.sourceforge.net/crayzedsgui/CEGUI-0.6.1.tar.gz?download'
CEGUI_FN='CEGUI-0.6.1.tar.gz'
CEGUI_DN='CEGUI-0.6.1'
CG_DL_32='http://developer.download.nvidia.com/cg/Cg_2.2/Cg-2.2_October2009_x86.tgz'
CG_FN_32='Cg-2.2_October2009_x86.tgz'
CG_DL_64='http://developer.download.nvidia.com/cg/Cg_2.2/Cg-2.2_October2009_x86_64.tgz'
CG_FN_64='Cg-2.2_October2009_x86_64.tgz'

function INSTALL_DIR_CHOOSE {

	RET=`zenity --list --radiolist --width=480 --height=100 \
		--title "PTBuild version $version" \
		--column="" --column $"Select install destination" --column $"Description" \
		TRUE    $"Default Directories"	$"Installs to /opt/peragro_svn" \
	        FALSE   $"Custom Directory"   	$"Choose custom install directory. (A directory peragro_svn will be created here)"`		

	if echo "$RET" | grep $"Default"; then

		INSTALL_DIR=/opt
		PT_DIR=$INSTALL_DIR/peragro_svn/peragro
		CO_DIR=$INSTALL_DIR/peragro_svn
		exit_var=1

	fi
	if echo "$RET" | grep $"Custom"; then

		INSTALL_DIR=$(zenity --file-selection --directory)
		PT_DIR=$INSTALL_DIR/peragro_svn/peragro
		CO_DIR=$INSTALL_DIR/peragro_svn
		exit_var=1

	fi

}
function CHOOSE_OPTIMIZATION {
	# Asks user to select their processor
	RET=`zenity --list --radiolist --width=700 --height=285 \
		--title "PTBuild version $version" \
		--column="" --column $"Select Your Processor" --column $"Description" \
		TRUE    $"Generic Build"	$"Compile with no optimizations." \
		FALSE   $"Automatic"		$"Attempt to detect best optimizations."`		


	if echo "$RET" | grep $"Generic"; then
		exit_var=1
		cal3dconfig="./configure --prefix=$CAL3D"
		csconfig="./configure --without-python --without-java --with-libcal3d=$CAL3D"
		celconfig="./configure --without-python"
	fi

	if echo "$RET" | grep $"Automatic"; then
		exit_var=1
		cal3dconfig="./configure --prefix=$CAL3D"
		csconfig="./configure --without-python --without-java --with-libcal3d=$CAL3D --enable-cpu-specific-optimizations=max"
		celconfig="./configure --without-python"
	fi
}
function BUILD_ENV {

	sudo mkdir $CO_DIR
	sudo mkdir $PT_DIR
	sudo chown -R $USER:users $CO_DIR
	sudo chmod -R a+rw $CO_DIR
	cd $CO_DIR
	rm profile &> /dev/null

cat << EOF > profile
export CRYSTAL=$PWD/CS_latest
export CEL=$PWD/CEL_latest
export CSCONFPATH=$PWD/CEL_latest
export CEGUI=$PWD/'$CEGUI_DN'
export LD_LIBRARY_PATH=$PWD/cal3d/cal3d/src/cal3d/.libs/:$CEGUI/lib:$PWD/CS_latest/:$PWD/CEL_latest/:$LD_LIBRARY_PATH
EOF

source profile

# Comment out later, using for doublechecking
echo $CRYSTAL
echo $CEGUI
echo $CEL

}
function GET_CS_SOURCE {
		cd $CO_DIR
		for (( i=1; i<=$CHECKOUT_TRIES; i++ )); do
			echo "Getting source code for CrystalSpace."
			echo "This will probably take a while so be patient."
			svn co $CS_SVN
			# exit loop if successful
			[ "$?" -eq "0" ] && break
		done
        # "i" greater than $CHECKOUT_TRIES means svn checkout failed
        if [ "$i" -gt "$CHECKOUT_TRIES" ]; then
			echo "Checkout of crystalspace has failed. Please check your net connection or try again later."
			exit 0
		fi
		notify-send "CrystalSpace Source Code Downloaded!"

}
function GET_CEL_SOURCE {
		cd $CO_DIR
        for (( i=1; i<=$CHECKOUT_TRIES; i++ )); do
			echo "Getting source code for CEL."
			echo "This will probably take a while so be patient."
			echo t | svn co $CEL_SVN >> log.log 2>&1
			# exit loop if successful
			[ "$?" -eq "0" ] && break
        done
        # "i" greater than $CHECKOUT_TRIES means svn checkout failed
        if [ "$i" -gt "$CHECKOUT_TRIES" ]; then
			echo "Checkout of CEL has failed. Please check your net connection or try again later."
			exit 0
		fi 

}
function GET_CEGUI_SOURCE {
		cd $CO_DIR
        for (( i=1; i<=$CHECKOUT_TRIES; i++ )); do
			echo "Getting source code for CEGUI."
			echo "This will probably go quickly."
			wget -c $CEGUI_DL
			# exit loop if successful
			[ "$?" -eq "0" ] && break
        done
        # "i" greater than $CHECKOUT_TRIES means svn checkout failed
        if [ "$i" -gt "$CHECKOUT_TRIES" ]; then
			echo "Download of CEGUI has failed. Please check your net connection or try again later."
			exit 0
		fi 
		notify-send "CEGUI Download Finished!"
		echo "# Unpacking CEGUI"
        echo "20" ; tar -xf $CEGUI_FN
		notify-send "CEGUI Unpacked!"
		rm $CEGUI_FN

}
function GET_CG_32 {
	cd $CO_DIR
	
	for (( i=1; i<=$CHECKOUT_TRIES; i++ )); do
		echo "Getting NVidia CG Library"
		wget -c $CG_DL_32
		# exit loop if successful
		[ "$?" -eq "0" ] && break
	done
	# "i" greater than $CHECKOUT_TRIES means the download failed
	if [ "$i" -gt "$CHECKOUT_TRIES" ]; then
		echo "Download of CG Library has failed. Please check your net connection or try again later."
		exit 0
	fi	
	notify-send "Cg Library Download Finished"
	echo "# Unpacking Cg Library"
	cd /
	echo "40" ; sudo tar -xf $CG_FN_32
	sudo rm $CG_FN_32
	notify-send "nVidia Cg Library Installed!"
	cd $CO_DIR
}
function COMPILE_CEL {
	echo "Compiling CEL"
	cd $CO_DIR/CEL_latest
	./autogen.sh
	./configure
	jam -aq libs plugins cel-config cel-config-1.9
}
function COMPILE_CS {
	cd $CO_DIR/CS_latest
	echo "Compiling CrystalSpace"
	./configure --without-java --without-lib3ds --without-libaws --with-CEGUI=$CEGUI
	jam -aq libs plugins cs-config cs-config-1.9 walktest
}
function COMPILE_CEGUI {
	cd $CO_DIR
	cd $CO_DIR/$CEGUI_DN
	echo "Compiling CEGUI"
	./configure --prefix=$CEGUI --disable-xerces-c
	make
	make install
}
function RESOLVE_KARMIC {

	# attempt to resolve dependencies
	(
        echo "10" ; sleep 3 && DPKG_CHECK
        echo "# Updating Sources Cache"
        echo "35" ; sudo apt-get update
        echo "# Installing Software"
        echo "50" ; sudo apt-get --assume-yes install libnotify-bin libjpeg62-dev x11proto-gl-dev autoconf jam bison flex-old automake1.9 libcurl4-openssl-dev libmng-dev libmikmod2-dev libogg-dev libvorbis-dev zlib1g-dev libpng12-dev build-essential libtool libglu1-mesa-dev libglu1-xorg-dev xserver-xorg-dev libxt-dev libopenal1 libopenal-dev subversion zlibc libfreetype6-dev libfreetype6 libasound2-dev alsa-oss libxxf86vm-dev libxext-dev x11proto-xext-dev libboost1.40-dev libxerces-c2-dev libode0-dev swig libpcre3-dev
        echo "# Finishing Up..."
        echo "100"
        ) |
        zenity --progress \
          --title="Dependency Resolution" \
          --text="Checking if any package managers are running" \
          --percentage=0
}
function DPKG_CHECK {

	# Makes sure package manager isn't running.
	if ps -U root -u root u | grep "synaptic" | grep -v grep;
		then zenity --info --title "PTBuild" --text $"PTBuild WILL NOT run while Synaptic is running. Please close Synaptic";
	exit 1;
	elif ps -U root -u root u | grep "update-manager" | grep -v grep;
		then zenity --info --title "PTBuild" --text $"PTBuild WILL NOT while update-manager is running. Please close update-manager";
	exit 1;
	elif ps -U root -u root u | grep "apt-get" | grep -v grep;
		then zenity --info --title "PTBuild" --text $"PTBuild WILL NOT run while you are also running apt-get. Please finish what you were doing with apt and restart this script.";
	exit 1;
	elif ps -U root -u root u | grep "dpkg" | grep -v grep;
		then zenity --info --title "PTBuild" --text $"PTBuild WILL NOT run while you are installing packages with dpkg. Please finish installing your package and rerun PTBuild";
	exit 0;
	kill -9 $ZENITY_PID

fi
}
function ASK {

	# Asks user if they want to attempt to resolve dependancies.
	zenity --question --text $"Would you like to attempt to get all software needed to compile Peragro? (Only necessary if this is the first time you have run this script.) "
	if [ $? -eq 0 ] ; then
		RESOLVE_KARMIC
	fi


}
function PASSWORD {
sudo -k
	for (( i=1; i<=$PASS_TRIES; i++ )); do
		zenity --entry --title "Password Prompt" --hide-text --text $"Enter your password (try #$i of $PASS_TRIES)." | 		sudo -S -v

# exit loop if password was correct
	[ "$?" -eq "0" ] && break
	done
	# "i" greater than $PASS_TRIES means $PASS_TRIES failed tries
	[ "$i" -gt "$PASS_TRIES" ] && { zenity --error --text "Failed to enter correct password, exiting..."; exit 1; }
}
function CHECKOUT_SOURCES {
	(
        echo "5" ; cd $CO_DIR
        echo "# Downloading CEGUI"
        echo "10" ; GET_CEGUI_SOURCE
        echo "# Downloading nVidia Gg Library"
        echo "30" ; GET_CG_32
        echo "# Downloading CrystalSpace Source"
        echo "40" ; GET_CS_SOURCE
        echo "# Finishing Up..."
        echo "100"
        ) |
        zenity --progress \
          --title="Dependency Resolution" \
          --text="Entering Checkout Directory" \
          --percentage=0
}
PASSWORD
INSTALL_DIR_CHOOSE
# setup_profile
BUILD_ENV
ASK
CHOOSE_OPTIMIZATION
CHECKOUT_SOURCES

exit 0
