if [ "$1" = "" ]; then
  echo "Usage networkcodegenerator.sh [msgs_???.xml]"
  echo ""
  echo "the script will generate the files ???messages.cpp and ???messages.h based on msgs_???.xml"
  echo "and of course, replace ??? with a suitable name (examples: door, book, user)"
  echo ""
  echo "this script is still incomplete (lacking the <list> feature and maybe other things that have not been found yet, currently skips a message if it finds a list) but if you want to automate the whole process you can specify -auto [overwrite] as filename to generate all messages automatically (assumes you are either in PT/scripts/ or PT/)"
  exit
fi
if [ "$1" = "-auto" ]; then
  if [ "$(echo -n "$0" | sed -e "s/\/.*//;")" != "scripts" ]; then cd ..; fi
  cd src/common/network
  files="$(ls -1 ../../../data/generate/network | sed -n -e "/msgs_.*\.xml\$/p")"
  if [ "$2" != "overwrite" ]; then
    overwritecheck1="if [ ! -e \"\$(echo \"&\" | sed -e \"s\\/^.*_\\/\\/;s\\/\\\.xml\\\$\\/\\/;\")messages.cpp\" ]; then "
    overwritecheck2="; else echo \"Skipping & since it has already been generated.\"; fi"
  fi
  files="$(echo "$files" | sed -e "s/^.*\$/${overwritecheck1}echo \"Parsing &...\"\n\.\.\/\.\.\/\.\.\/scripts\/networkcodegenerator.sh \.\.\/\.\.\/\.\.\/data\/generate\/network\/&${overwritecheck2}/")"
  eval "$files"
  # Generate nwtypes.h
  messagetypes="$(cat ../../../data/generate/network/netmessage.xml | grep "<type " | sed -e "s/^.*name=\"/    /;s/\">/,/;y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;")"
  while [ "$(echo "$messagetypes" | sed -n -e "/[^0-9],/p")" != "" ]; do
    line="$(echo -n "$messagetypes" | sed -n -e "/[^0-9],/=" | head -n 1 | head -c -1)"
    messagetypes="$(echo -n "$messagetypes" | sed -e "$line s/,/=$(($line-1)),/;")"
  done
  messagetypes="$(echo -n "$messagetypes" | head -c -1)"
  echo "/*
    Copyright (C) 2005 Development Team of Peragro Tempus

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Note: This code is generated by a script, to edit/create messages, have a look in data/generate/network

#ifndef _NWTYPES_H_
#define _NWTYPES_H_

#define MSG_HANDLER_COUNT $(echo "$messagetypes" | wc -l)

namespace MESSAGES
{
  enum HANDLERS
  {
$messagetypes
  };
}

#endif // _NWTYPES_H_" > nwtypes.h
  exit
fi
name="$(echo -n "$1" | sed -e "s/^.*_//;s/\.xml\$//;")"
nameuc="$(echo -n "$name" | sed -e "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;")"

data="$(cat "$1")"
if [ "$(echo -n $data | grep "\<list\>")" != "" ]; then echo "$name uses unimplemented list function, skipping."; exit; fi
# Some compatibility stuff
data="$(echo -n "$data" | sed -e "s/><\/message>/>\n<\/message>/")"
data="$(echo -n "$data" | sed -e "s/\r\n/\n/")"
data="$(echo -n "$data" | sed -e "s/\n\r/\n/")"
data="$(echo -n "$data" | sed -e "s/\r/\n/")"
messages="$(echo "$data" | grep "<message " | sed -e "s/^.* name=\"/    /;s/\">/,/;y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;" | head -c -2)"
while [ "$(echo -n "$messages" | wc -l)" -gt 0 ]; do
  messages="$(echo -n "$messages" | sed -e "N;s/\r//;s/\n/\\\n/")"
done
data="$(echo -n "$data" | sed -e "s/<message-implementation>/\/*\n    Copyright (C) 2005 Development Team of Peragro Tempus\n\n    This program is free software; you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*\/\n\n\/\/ Note: This code is generated by a script, to edit\/create messages, have a look in data\/generate\/network\n\n#ifndef _${nameuc}MESSAGES_H_\n#define _${nameuc}MESSAGES_H_\n\n#include \"netmessage.h\"\n\nnamespace ${nameuc}\n{\n  enum MESSAGES\n  {\n$messages\n  };\n}\n/")"
data="$(echo -n "$data" | sed -e "/<message /{s/^.* name=\"/<msg>/;s/\">/<\/msg>/;};s/<msg>.*<\/msg>/class &Message : public NetMessage\n{\npublic:\n  &Message() : NetMessage(MESSAGES::$nameuc,$nameuc::<UC>&<\/UC>)\n  {\n  }\n\n  ~&Message()\n  {\n  }\n\n  void serialise(ByteStream* bs);\n  void deserialise(ByteStream* bs);\n/;s/<msg>//g;s/<\/msg>//g;")"
while [ "$(echo "$data" | grep "<UC>" -c)" != "0" ]; do
  UC="$(echo "$data" | grep "<UC>" | head -n 1 | sed -e "s/^.*<UC>//;s/<\/UC>.*\$//;y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;")"
  line="$(echo -n "$data" | sed -n -e "/<UC>/=" | head -n 1 | head -c -1)"
  data="$(echo -n "$data" | sed -e "$line s/<UC>.*<\/UC>/$UC/")"
done
data="$(echo -n "$data" | sed -e "s/<uint32>.*<\/uint32>/private:\n  unsigned int <LC>&<\/LC>;\npublic:\n  unsigned int get&() { return <LC>&<\/LC>; }\n  void set&(unsigned int x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<uint16>.*<\/uint16>/private:\n  unsigned short <LC>&<\/LC>;\npublic:\n  unsigned short get&() { return <LC>&<\/LC>; }\n  void set&(unsigned short x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<uint8>.*<\/uint8>/private:\n  unsigned char <LC>&<\/LC>;\npublic:\n  unsigned char get&() { return <LC>&<\/LC>; }\n  void set&(unsigned char x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<float>.*<\/float>/private:\n  float <LC>&<\/LC>;\npublic:\n  float get&() { return <LC>&<\/LC>; }\n  void set&(float x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<string>.*<\/string>/private:\n  ptString <LC>&<\/LC>;\npublic:\n  ptString get&() { return <LC>&<\/LC>; }\n  void set&(ptString x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<text>.*<\/text>/private:\n  const char* <LC>&<\/LC>;\npublic:\n  const char* get&() { return <LC>&<\/LC>; }\n  void set&(const char* x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<bool>.*<\/bool>/private:\n  bool <LC>&<\/LC>;\npublic:\n  bool get&() { return <LC>&<\/LC>; }\n  void set&(bool x) { <LC>&<\/LC> = x; }/")"
data="$(echo -n "$data" | sed -e "s/<colour24>.*<\/colour24>/private:\n  unsigned char <LC>&<\/LC>[3];\npublic:\n  unsigned char* get&() { return <LC>&<\/LC>; }\n  void set&(unsigned char r, unsigned char g, unsigned char b)\n  {\n    <LC>&<\/LC>[0] = r;\n    <LC>&<\/LC>[1] = g;\n    <LC>&<\/LC>[2] = b;\n  }\n  void set&(const unsigned char* x)\n  {\n    set&(x[0], x[1], x[2]);\n  }/")"
data="$(echo -n "$data" | sed -e "s/<vector3f>.*<\/vector3f>/private:\n  float <LC>&<\/LC>[3];\npublic:\n  float* get&() { return <LC>&<\/LC>; }\n  void set&(float x, float y, float z)\n  {\n    <LC>&<\/LC>[0] = x;\n    <LC>&<\/LC>[1] = y;\n    <LC>&<\/LC>[2] = z;\n  }\n  void set&(const float* x)\n  {\n    set&(x[0], x[1], x[2]);\n  }/")"
# Clean up leftover tags
data="$(echo -n "$data" | sed -e "s/<uint32>//g;s/<\/uint32>//g;")"
data="$(echo -n "$data" | sed -e "s/<uint16>//g;s/<\/uint16>//g;")"
data="$(echo -n "$data" | sed -e "s/<uint8>//g;s/<\/uint8>//g;")"
data="$(echo -n "$data" | sed -e "s/<float>//g;s/<\/float>//g;")"
data="$(echo -n "$data" | sed -e "s/<string>//g;s/<\/string>//g;")"
data="$(echo -n "$data" | sed -e "s/<text>//g;s/<\/text>//g;")"
data="$(echo -n "$data" | sed -e "s/<bool>//g;s/<\/bool>//g;")"
data="$(echo -n "$data" | sed -e "s/<colour24>//g;s/<\/colour24>//g;")"
data="$(echo -n "$data" | sed -e "s/<vector3f>//g;s/<\/vector3f>//g;")"
while [ "$(echo "$data" | grep "<LC>" -c)" != "0" ]; do
  LC="$(echo "$data" | grep "<LC>" | head -n 1 | sed -e "s/^.*<LC>//;s/<\/LC>.*\$//;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/;")"
  line="$(echo -n "$data" | sed -n -e "/<LC>/=" | head -n 1 | head -c -1)"
  data="$(echo -n "$data" | sed -e "$line s/<LC>.*<\/LC>/$LC/")"
done
data="$(echo -n "$data" | sed -e "s/\t/ /g;s/<\!--.*-->//g;s/<\/message-implementation>/\n#endif \/\/ _${nameuc}MESSAGES_H_\n/;s/ <\/message>/};/g;s/^ *private:/private:/;")"
echo -n "$data
" > ${name}messages.h

data="$(cat "$1")"
data="$(echo -n "$data" | sed -e "s/><\/message>/>\n<\/message>/")"
data="$(echo -n "$data" | sed -e "s/<message-implementation>/\/*\n    Copyright (C) 2005 Development Team of Peragro Tempus\n\n    This program is free software; you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*\/\n\n\/\/ Note: This code is generated by a script, to edit\/create messages, have a look in data\/generate\/network\n\n#include \"common\/network\/${name}messages.h\"\n#include \"deserialiser.h\"\n#include \"serialiser.h\"\n/")"
# Duplicate each message tag, one for serialize and one for deserialize (now they will be message and demessage tags)
data="$(echo -n "$data" | sed -n -e "0,/\"serialiser.h/p;/<message /,/<\/message>\n/{H;s/message/aessage/;}; /<\/aessage>/{x;p;s/<message /<demessage /;s/<\/message>/<\/demessage>/;p;d;x;d;}" | sed -e "/<\/aessage>/d")"
# Tripple each colour24 tag since they repeat trice to get R, G and B, same with vector3f tags
data="$(echo -n "$data" | sed -e "/<colour24>/{p;p;}")"
data="$(echo -n "$data" | sed -e "/<vector3f>/{p;p;}")"

data="$(echo -n "$data" | sed -e "/<message /,/<\/message>/{s/^.* name=\"/void /;s/\">/Message::serialise(ByteStream* bs)\n{\n  Serialiser serial(bs);\n  serial.setInt8(type);\n  serial.setInt8(id);/;s/<uint32>/serial.setInt32(<LC>/;s/<uint16>/serial.setInt16(<LC>/;s/<uint8>/serial.setInt8(<LC>/;s/<float>/serial.setFloat(<LC>/;s/<string>/serial.setString(<LC>/;s/<text>/serial.setString(<LC>/;s/<bool>/serial.setInt8(<LC>/;s/<colour24>/serial.setInt8(<LC>/;s/<vector3f>/serial.setFloat(<LC>/;s/<\/uint32>/<\/LC>);/;s/<\/uint16>/<\/LC>);/;s/<\/uint8>/<\/LC>);/;s/<\/float>/<\/LC>);/;s/<\/string>/<\/LC>);/;s/<\/text>/<\/LC>);/;s/<\/bool>/<\/LC>?1:0);/;s/<\/colour24>/<\/LC>[#fixme#]);/;s/<\/vector3f>/<\/LC>[#fixme#]);/;}")"
data="$(echo -n "$data" | sed -e "/<demessage /,/<\/demessage>/{s/^.* name=\"/void /;s/\">/Message::deserialise(ByteStream* bs)\n{\n  Deserialiser serial(bs);\n  type = serial.getInt8();\n  id = serial.getInt8();/;s/<uint32>/<LC>/;s/<uint16>/<LC>/;s/<uint8>/<LC>/;s/<float>/<LC>/;s/<string>/<LC>/;s/<text>/serial.getString(<LC>/;s/<bool>/<LC>/;s/<colour24>/<LC>/;s/<vector3f>/<LC>/;s/<\/uint32>/<\/LC> = (unsigned int) serial.getInt32();/;s/<\/uint16>/<\/LC> = (unsigned int) serial.getInt16();/;s/<\/uint8>/<\/LC> = (unsigned int) serial.getInt8();/;s/<\/float>/<\/LC> = serial.getFloat();/;s/<\/string>/<\/LC> = serial.getString();/;s/<\/text>/<\/LC>);/;s/<\/bool>/<\/LC> = serial.getInt8() != 0;/;s/<\/colour24>/<\/LC>[#fixme#] = (unsigned char) serial.getInt8();/;s/<\/vector3f>/<\/LC>[#fixme#] = serial.getFloat();/;}")"

three="0" # Hack to set the vector-numbers right
while [ "$(echo -n "$data" | grep "#fixme#")" != "" ]; do
  line="$(echo -n "$data" | sed -n -e "/#fixme#/=" | head -n 1 | head -c -1)"
  data="$(echo -n "$data" | sed -e "$line s/#fixme#/$three/")"
  if [ "$three" = "2" ]; then three="0"
  elif [ "$three" = "1" ]; then three="2"
  elif [ "$three" = "0" ]; then three="1"; fi
done

data="$(echo -n "$data" | sed -e "s/\t/ /g;s/<\!--.*-->//g;s/ <\/message>/}/g;s/ <\/demessage>/}/g;")"
while [ "$(echo "$data" | grep "<LC>" -c)" != "0" ]; do
  LC="$(echo "$data" | grep "<LC>" | head -n 1 | sed -e "s/^.*<LC>//;s/<\/LC>.*\$//;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/;")"
  line="$(echo -n "$data" | sed -n -e "/<LC>/=" | head -n 1 | head -c -1)"
  data="$(echo -n "$data" | sed -e "$line s/<LC>.*<\/LC>/$LC/")"
done
echo -n "$data
" > ${name}messages.cpp
